import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import Typed from 'typed.js';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["wrapper"];
var _c1 = ["*"];
var NgxTypedJsComponent = /** @class */ (function () {
    function NgxTypedJsComponent() {
        this.completed = new EventEmitter();
        this.preStringTyped = new EventEmitter();
        this.stringTyped = new EventEmitter();
        this.lastStringBackspaced = new EventEmitter();
        this.typingPaused = new EventEmitter();
        this.typingResumed = new EventEmitter();
        this.reset = new EventEmitter();
        this.stopped = new EventEmitter();
        this.started = new EventEmitter();
        this.destroyed = new EventEmitter();
    }
    NgxTypedJsComponent.prototype.ngAfterViewInit = function () {
        this.typed = new Typed(this.content.nativeElement.querySelector('.typing'), this.options);
        if (this.showCursor !== false) {
            this.updateCursorStyle();
        }
    };
    NgxTypedJsComponent.prototype.toggle = function () {
        this.typed.toggle();
    };
    NgxTypedJsComponent.prototype.stop = function () {
        this.typed.stop();
    };
    NgxTypedJsComponent.prototype.start = function () {
        this.typed.start();
    };
    NgxTypedJsComponent.prototype.destroy = function () {
        this.typed.destroy();
    };
    NgxTypedJsComponent.prototype.doReset = function (restart) {
        this.typed.reset(restart);
    };
    Object.defineProperty(NgxTypedJsComponent.prototype, "options", {
        get: function () {
            var emit = function (emitter) { return function () { return emitter.emit(); }; };
            var emitIndex = function (emitter) { return function (index) { return emitter.emit(index); }; };
            var opts = {
                strings: this.strings,
                stringsElement: this.stringsElement,
                typeSpeed: this.typeSpeed,
                startDelay: this.startDelay,
                backSpeed: this.backSpeed,
                smartBackspace: this.smartBackspace,
                shuffle: this.shuffle,
                backDelay: this.backDelay,
                fadeOut: this.fadeOut,
                fadeOutClass: this.fadeOutClass,
                fadeOutDelay: this.fadeOutDelay,
                loop: this.loop,
                loopCount: this.loopCount,
                showCursor: this.showCursor,
                autoInsertCss: this.autoInsertCss,
                attr: this.attr,
                bindInputFocusEvents: this.bindInputFocusEvents,
                contentType: this.contentType,
                onComplete: emit(this.completed),
                preStringTyped: emitIndex(this.preStringTyped),
                onStringTyped: emitIndex(this.stringTyped),
                onLastStringBackspaced: emit(this.lastStringBackspaced),
                onTypingPaused: emitIndex(this.typingPaused),
                onTypingResumed: emitIndex(this.typingResumed),
                onReset: emit(this.reset),
                onStop: emitIndex(this.stopped),
                onStart: emitIndex(this.started),
                onDestroy: emit(this.destroyed),
            };
            Object.keys(opts).forEach(function (key) {
                if (opts[key] === undefined) {
                    delete opts[key];
                }
            });
            return opts;
        },
        enumerable: true,
        configurable: true
    });
    NgxTypedJsComponent.prototype.updateCursorStyle = function () {
        var textElementStyle = getComputedStyle(this.content.nativeElement.querySelector('.typing'));
        var cursorElementStyle = this.content.nativeElement.querySelector('.typed-cursor').style;
        cursorElementStyle.fontSize = textElementStyle.fontSize;
        cursorElementStyle.color = this.cursorColor || textElementStyle.color;
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxTypedJsComponent.prototype, "cursorColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NgxTypedJsComponent.prototype, "strings", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxTypedJsComponent.prototype, "stringsElement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxTypedJsComponent.prototype, "typeSpeed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxTypedJsComponent.prototype, "startDelay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxTypedJsComponent.prototype, "backSpeed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "smartBackspace", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "shuffle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxTypedJsComponent.prototype, "backDelay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "fadeOut", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxTypedJsComponent.prototype, "fadeOutClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "fadeOutDelay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "loop", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxTypedJsComponent.prototype, "loopCount", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "showCursor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxTypedJsComponent.prototype, "cursorChar", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "autoInsertCss", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxTypedJsComponent.prototype, "attr", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxTypedJsComponent.prototype, "bindInputFocusEvents", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxTypedJsComponent.prototype, "contentType", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "completed", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "preStringTyped", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "stringTyped", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "lastStringBackspaced", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "typingPaused", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "typingResumed", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "reset", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "stopped", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "started", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxTypedJsComponent.prototype, "destroyed", void 0);
    __decorate([
        ViewChild('wrapper', { static: true }),
        __metadata("design:type", Object)
    ], NgxTypedJsComponent.prototype, "content", void 0);
NgxTypedJsComponent.ɵfac = function NgxTypedJsComponent_Factory(t) { return new (t || NgxTypedJsComponent)(); };
NgxTypedJsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxTypedJsComponent, selectors: [["ngx-typed-js"]], viewQuery: function NgxTypedJsComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, inputs: { cursorColor: "cursorColor", strings: "strings", stringsElement: "stringsElement", typeSpeed: "typeSpeed", startDelay: "startDelay", backSpeed: "backSpeed", smartBackspace: "smartBackspace", shuffle: "shuffle", backDelay: "backDelay", fadeOut: "fadeOut", fadeOutClass: "fadeOutClass", fadeOutDelay: "fadeOutDelay", loop: "loop", loopCount: "loopCount", showCursor: "showCursor", cursorChar: "cursorChar", autoInsertCss: "autoInsertCss", attr: "attr", bindInputFocusEvents: "bindInputFocusEvents", contentType: "contentType" }, outputs: { completed: "completed", preStringTyped: "preStringTyped", stringTyped: "stringTyped", lastStringBackspaced: "lastStringBackspaced", typingPaused: "typingPaused", typingResumed: "typingResumed", reset: "reset", stopped: "stopped", started: "started", destroyed: "destroyed" }, ngContentSelectors: _c1, decls: 3, vars: 0, consts: [["wrapper", ""]], template: function NgxTypedJsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", null, 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: ["[_nghost-%COMP%] .typing{display:inline}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxTypedJsComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-typed-js',
                template: "<div #wrapper>\n  <ng-content></ng-content>\n</div>\n",
                styles: [":host>>>.typing{display:inline}"]
            }]
    }], function () { return []; }, { completed: [{
            type: Output
        }], preStringTyped: [{
            type: Output
        }], stringTyped: [{
            type: Output
        }], lastStringBackspaced: [{
            type: Output
        }], typingPaused: [{
            type: Output
        }], typingResumed: [{
            type: Output
        }], reset: [{
            type: Output
        }], stopped: [{
            type: Output
        }], started: [{
            type: Output
        }], destroyed: [{
            type: Output
        }], cursorColor: [{
            type: Input
        }], strings: [{
            type: Input
        }], stringsElement: [{
            type: Input
        }], typeSpeed: [{
            type: Input
        }], startDelay: [{
            type: Input
        }], backSpeed: [{
            type: Input
        }], smartBackspace: [{
            type: Input
        }], shuffle: [{
            type: Input
        }], backDelay: [{
            type: Input
        }], fadeOut: [{
            type: Input
        }], fadeOutClass: [{
            type: Input
        }], fadeOutDelay: [{
            type: Input
        }], loop: [{
            type: Input
        }], loopCount: [{
            type: Input
        }], showCursor: [{
            type: Input
        }], cursorChar: [{
            type: Input
        }], autoInsertCss: [{
            type: Input
        }], attr: [{
            type: Input
        }], bindInputFocusEvents: [{
            type: Input
        }], contentType: [{
            type: Input
        }], content: [{
            type: ViewChild,
            args: ['wrapper', { static: true }]
        }] }); })();
    return NgxTypedJsComponent;
}());
export { NgxTypedJsComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,