import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { YoutubePlayerService, defaultSizes } from './ngx-youtube-player.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ngx-youtube-player.service';
let YoutubePlayerComponent = class YoutubePlayerComponent {
    constructor(playerService, elementRef, renderer) {
        this.playerService = playerService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.videoId = '';
        this.height = defaultSizes.height;
        this.width = defaultSizes.width;
        /**
         * @description sets the protocol by the navigator object
         * if there is no window, it sets a default http protocol
         * unless the protocol is set from outside
         */
        this.protocol = this.getProtocol();
        this.playerVars = {};
        // player created and initialized - sends instance of the player
        this.ready = new EventEmitter();
        // state change: send the YT event with its state
        this.change = new EventEmitter();
    }
    ngAfterContentInit() {
        const htmlId = this.playerService.generateUniqueId();
        const playerSize = { height: this.height, width: this.width };
        const container = this.renderer.selectRootElement('#yt-player-ngx-component');
        this.renderer.setAttribute(container, 'id', htmlId);
        this.playerService.loadPlayerApi({
            protocol: this.protocol
        });
        this.playerService.setupPlayer(htmlId, {
            change: this.change,
            ready: this.ready
        }, playerSize, this.videoId, this.playerVars);
    }
    getProtocol() {
        const hasWindow = window && window.location;
        const protocol = hasWindow
            ? window.location.protocol.replace(':', '')
            : 'http';
        return protocol;
    }
};
YoutubePlayerComponent.ɵfac = function YoutubePlayerComponent_Factory(t) { return new (t || YoutubePlayerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.YoutubePlayerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
YoutubePlayerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: YoutubePlayerComponent, selectors: [["youtube-player"]], inputs: { videoId: "videoId", height: "height", width: "width", protocol: "protocol", playerVars: "playerVars" }, outputs: { ready: "ready", change: "change" }, decls: 1, vars: 0, consts: [["id", "yt-player-ngx-component"]], template: function YoutubePlayerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input(),
    __metadata("design:type", Object)
], YoutubePlayerComponent.prototype, "videoId", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], YoutubePlayerComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], YoutubePlayerComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], YoutubePlayerComponent.prototype, "protocol", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], YoutubePlayerComponent.prototype, "playerVars", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], YoutubePlayerComponent.prototype, "ready", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], YoutubePlayerComponent.prototype, "change", void 0);
YoutubePlayerComponent = __decorate([ __metadata("design:paramtypes", [YoutubePlayerService,
        ElementRef,
        Renderer2])
], YoutubePlayerComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(YoutubePlayerComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'youtube-player',
                template: `
    <div id="yt-player-ngx-component"></div>
  `
            }]
    }], function () { return [{ type: ɵngcc1.YoutubePlayerService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { videoId: [{
            type: Input
        }], height: [{
            type: Input
        }], width: [{
            type: Input
        }], protocol: [{
            type: Input
        }], playerVars: [{
            type: Input
        }], ready: [{
            type: Output
        }], change: [{
            type: Output
        }] }); })();
export { YoutubePlayerComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,