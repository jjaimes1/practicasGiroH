/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * @record
 */
import * as Éµngcc0 from '@angular/core';
export function FlatpickrDefaultsInterface() { }
function FlatpickrDefaultsInterface_tsickle_Closure_declarations() {
    /**
     * Exactly the same as date format, but for the altInput field.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.altFormat;
    /**
     * 	Show the user a readable date (as per altFormat), but return something totally different to the server.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.altInput;
    /**
     * This class will be added to the input element created by the altInput option.
     * Note that `altInput` already inherits classes from the original input.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.altInputClass;
    /**
     * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.allowInput;
    /**
     * Instead of `body`, appends the calendar to the specified node instead.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.appendTo;
    /**
     * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.ariaDateFormat;
    /**
     * Whether clicking on the input should open the picker.
     * You could disable this if you wish to open the calendar manually `with.open()`.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.clickOpens;
    /**
     * A string of characters which are used to define how the date will be displayed in the input box.
     * The supported characters are defined in the table below.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.dateFormat;
    /**
     * Initial value of the hour element.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.defaultHour;
    /**
     * Initial value of the minute element.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.defaultMinute;
    /**
     * Initial value of the seconds element.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.defaultSeconds;
    /**
     * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-specific-dates">disabling dates</a>.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.disable;
    /**
     * Set disableMobile to true to always use the non-native picker.
     * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.disableMobile;
    /**
     * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few">enabling dates</a>.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.enable;
    /**
     * Enables time picker.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.enableTime;
    /**
     * Enables seconds in the time picker.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.enableSeconds;
    /**
     * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.formatDate;
    /**
     * Adjusts the step for the hour input (incl. scrolling).
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.hourIncrement;
    /**
     * Displays the calendar inline.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.inline;
    /**
     * The maximum date that a user can pick to (inclusive).
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.maxDate;
    /**
     * The minimum date that a user can start picking from (inclusive).
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.minDate;
    /**
     * Adjusts the step for the minute input (incl. scrolling).
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.minuteIncrement;
    /**
     * Select a single date, multiple dates or a date range.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.mode;
    /**
     * HTML for the arrow icon, used to switch months.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.nextArrow;
    /**
     * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.noCalendar;
    /**
     * Provide a date for 'today', which will be used instead of "new Date()"
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.now;
    /**
     * Function that expects a date string and must return a Date object.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.parseDate;
    /**
     * HTML for the left arrow icon.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.prevArrow;
    /**
     * Show the month using the shorthand version (ie, Sep instead of September).
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.shorthandCurrentMonth;
    /**
     * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.static;
    /**
     * Displays time picker in 24 hour mode without AM/PM selection when enabled.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.time24hr;
    /**
     * When true, dates will parsed, formatted, and displayed in UTC.
     * It's recommended that date strings contain the timezone, but not necessary.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.utc;
    /**
     * Enables display of week numbers in calendar.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.weekNumbers;
    /**
     * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.
     * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.getWeek;
    /**
     * Custom elements and input groups.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.wrap;
    /**
     * Array of plugin instances to use.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.plugins;
    /**
     * The locale object or string to use for the locale.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.locale;
    /**
     * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.convertModelValue;
    /**
     * The number of months shown.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.showMonths;
    /**
     * How the month should be displayed in the header of the calendar.
     * @type {?|undefined}
     */
    FlatpickrDefaultsInterface.prototype.monthSelectorType;
}
export class FlatpickrDefaults {
    constructor() {
        /**
         * Exactly the same as date format, but for the altInput field.
         */
        this.altFormat = 'F j, Y';
        /**
         * 	Show the user a readable date (as per altFormat), but return something totally different to the server.
         */
        this.altInput = false;
        /**
         * This class will be added to the input element created by the altInput option.
         * Note that `altInput` already inherits classes from the original input.
         */
        this.altInputClass = '';
        /**
         * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.
         */
        this.allowInput = false;
        /**
         * Instead of `body`, appends the calendar to the specified node instead.
         */
        this.appendTo = undefined;
        /**
         * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.
         */
        this.ariaDateFormat = 'F j, Y';
        /**
         * Whether clicking on the input should open the picker.
         * You could disable this if you wish to open the calendar manually `with.open()`.
         */
        this.clickOpens = true;
        /**
         * A string of characters which are used to define how the date will be displayed in the input box.
         * The supported characters are defined in the table below.
         */
        this.dateFormat = 'Y-m-d';
        /**
         * Initial value of the hour element.
         */
        this.defaultHour = 12;
        /**
         * Initial value of the minute element.
         */
        this.defaultMinute = 0;
        /**
         * Initial value of the seconds element.
         */
        this.defaultSeconds = 0;
        /**
         * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-specific-dates">disabling dates</a>.
         */
        this.disable = [];
        /**
         * Set disableMobile to true to always use the non-native picker.
         * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.
         */
        this.disableMobile = false;
        /**
         * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few">enabling dates</a>.
         */
        this.enable = [];
        /**
         * Enables time picker.
         */
        this.enableTime = false;
        /**
         * Enables seconds in the time picker.
         */
        this.enableSeconds = false;
        /**
         * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.
         */
        this.formatDate = undefined;
        /**
         * Adjusts the step for the hour input (incl. scrolling).
         */
        this.hourIncrement = 1;
        /**
         * Displays the calendar inline.
         */
        this.inline = false;
        /**
         * The maximum date that a user can pick to (inclusive).
         */
        this.maxDate = undefined;
        /**
         * The minimum date that a user can start picking from (inclusive).
         */
        this.minDate = undefined;
        /**
         * Adjusts the step for the minute input (incl. scrolling).
         */
        this.minuteIncrement = 5;
        /**
         * Select a single date, multiple dates or a date range.
         */
        this.mode = 'single';
        /**
         * HTML for the arrow icon, used to switch months.
         */
        this.nextArrow = '>';
        /**
         * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.
         */
        this.noCalendar = false;
        /**
         * Default now to the current date
         */
        this.now = new Date();
        /**
         * HTML for the left arrow icon.
         */
        this.prevArrow = '<';
        /**
         * Show the month using the shorthand version (ie, Sep instead of September).
         */
        this.shorthandCurrentMonth = false;
        /**
         * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).
         */
        this.static = false;
        /**
         * Displays time picker in 24 hour mode without AM/PM selection when enabled.
         */
        this.time24hr = false;
        /**
         * When true, dates will parsed, formatted, and displayed in UTC.
         * It's recommended that date strings contain the timezone, but not necessary.
         */
        this.utc = false;
        /**
         * Enables display of week numbers in calendar.
         */
        this.weekNumbers = false;
        /**
         * Custom elements and input groups.
         */
        this.wrap = false;
        /**
         * Array of plugin instances to use.
         */
        this.plugins = [];
        /**
         * The locale object or string to use for the locale.
         */
        this.locale = 'default';
        /**
         * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`
         */
        this.convertModelValue = false;
        /**
         * The number of months shown.
         */
        this.showMonths = 1;
        /**
         * How the month should be displayed in the header of the calendar.
         */
        this.monthSelectorType = 'static';
    }
}
FlatpickrDefaults.Éµfac = function FlatpickrDefaults_Factory(t) { return new (t || FlatpickrDefaults)(); };
FlatpickrDefaults.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: FlatpickrDefaults, factory: FlatpickrDefaults.Éµfac });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(FlatpickrDefaults, [{
        type: Injectable
    }], function () { return []; }, null); })();
function FlatpickrDefaults_tsickle_Closure_declarations() {
    /**
     * Exactly the same as date format, but for the altInput field.
     * @type {?}
     */
    FlatpickrDefaults.prototype.altFormat;
    /**
     * 	Show the user a readable date (as per altFormat), but return something totally different to the server.
     * @type {?}
     */
    FlatpickrDefaults.prototype.altInput;
    /**
     * This class will be added to the input element created by the altInput option.
     * Note that `altInput` already inherits classes from the original input.
     * @type {?}
     */
    FlatpickrDefaults.prototype.altInputClass;
    /**
     * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.
     * @type {?}
     */
    FlatpickrDefaults.prototype.allowInput;
    /**
     * Instead of `body`, appends the calendar to the specified node instead.
     * @type {?}
     */
    FlatpickrDefaults.prototype.appendTo;
    /**
     * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.
     * @type {?}
     */
    FlatpickrDefaults.prototype.ariaDateFormat;
    /**
     * Whether clicking on the input should open the picker.
     * You could disable this if you wish to open the calendar manually `with.open()`.
     * @type {?}
     */
    FlatpickrDefaults.prototype.clickOpens;
    /**
     * A string of characters which are used to define how the date will be displayed in the input box.
     * The supported characters are defined in the table below.
     * @type {?}
     */
    FlatpickrDefaults.prototype.dateFormat;
    /**
     * Initial value of the hour element.
     * @type {?}
     */
    FlatpickrDefaults.prototype.defaultHour;
    /**
     * Initial value of the minute element.
     * @type {?}
     */
    FlatpickrDefaults.prototype.defaultMinute;
    /**
     * Initial value of the seconds element.
     * @type {?}
     */
    FlatpickrDefaults.prototype.defaultSeconds;
    /**
     * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-specific-dates">disabling dates</a>.
     * @type {?}
     */
    FlatpickrDefaults.prototype.disable;
    /**
     * Set disableMobile to true to always use the non-native picker.
     * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.
     * @type {?}
     */
    FlatpickrDefaults.prototype.disableMobile;
    /**
     * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few">enabling dates</a>.
     * @type {?}
     */
    FlatpickrDefaults.prototype.enable;
    /**
     * Enables time picker.
     * @type {?}
     */
    FlatpickrDefaults.prototype.enableTime;
    /**
     * Enables seconds in the time picker.
     * @type {?}
     */
    FlatpickrDefaults.prototype.enableSeconds;
    /**
     * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.
     * @type {?}
     */
    FlatpickrDefaults.prototype.formatDate;
    /**
     * Adjusts the step for the hour input (incl. scrolling).
     * @type {?}
     */
    FlatpickrDefaults.prototype.hourIncrement;
    /**
     * Displays the calendar inline.
     * @type {?}
     */
    FlatpickrDefaults.prototype.inline;
    /**
     * The maximum date that a user can pick to (inclusive).
     * @type {?}
     */
    FlatpickrDefaults.prototype.maxDate;
    /**
     * The minimum date that a user can start picking from (inclusive).
     * @type {?}
     */
    FlatpickrDefaults.prototype.minDate;
    /**
     * Adjusts the step for the minute input (incl. scrolling).
     * @type {?}
     */
    FlatpickrDefaults.prototype.minuteIncrement;
    /**
     * Select a single date, multiple dates or a date range.
     * @type {?}
     */
    FlatpickrDefaults.prototype.mode;
    /**
     * HTML for the arrow icon, used to switch months.
     * @type {?}
     */
    FlatpickrDefaults.prototype.nextArrow;
    /**
     * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.
     * @type {?}
     */
    FlatpickrDefaults.prototype.noCalendar;
    /**
     * Default now to the current date
     * @type {?}
     */
    FlatpickrDefaults.prototype.now;
    /**
     * Function that expects a date string and must return a Date object.
     * @type {?}
     */
    FlatpickrDefaults.prototype.parseDate;
    /**
     * HTML for the left arrow icon.
     * @type {?}
     */
    FlatpickrDefaults.prototype.prevArrow;
    /**
     * Show the month using the shorthand version (ie, Sep instead of September).
     * @type {?}
     */
    FlatpickrDefaults.prototype.shorthandCurrentMonth;
    /**
     * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).
     * @type {?}
     */
    FlatpickrDefaults.prototype.static;
    /**
     * Displays time picker in 24 hour mode without AM/PM selection when enabled.
     * @type {?}
     */
    FlatpickrDefaults.prototype.time24hr;
    /**
     * When true, dates will parsed, formatted, and displayed in UTC.
     * It's recommended that date strings contain the timezone, but not necessary.
     * @type {?}
     */
    FlatpickrDefaults.prototype.utc;
    /**
     * Enables display of week numbers in calendar.
     * @type {?}
     */
    FlatpickrDefaults.prototype.weekNumbers;
    /**
     * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.
     * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.
     * @type {?}
     */
    FlatpickrDefaults.prototype.getWeek;
    /**
     * Custom elements and input groups.
     * @type {?}
     */
    FlatpickrDefaults.prototype.wrap;
    /**
     * Array of plugin instances to use.
     * @type {?}
     */
    FlatpickrDefaults.prototype.plugins;
    /**
     * The locale object or string to use for the locale.
     * @type {?}
     */
    FlatpickrDefaults.prototype.locale;
    /**
     * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`
     * @type {?}
     */
    FlatpickrDefaults.prototype.convertModelValue;
    /**
     * The number of months shown.
     * @type {?}
     */
    FlatpickrDefaults.prototype.showMonths;
    /**
     * How the month should be displayed in the header of the calendar.
     * @type {?}
     */
    FlatpickrDefaults.prototype.monthSelectorType;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,