import { __decorate } from "tslib";
import { AfterViewInit, Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { DEFAULTS, EVENTS } from './scroll-to-helpers';
import { ScrollToService } from './scroll-to.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './scroll-to.service';
let ScrollToDirective = class ScrollToDirective {
    constructor(elementRef, scrollToService, renderer2) {
        this.elementRef = elementRef;
        this.scrollToService = scrollToService;
        this.renderer2 = renderer2;
        this.ngxScrollTo = DEFAULTS.target;
        this.ngxScrollToEvent = DEFAULTS.action;
        this.ngxScrollToDuration = DEFAULTS.duration;
        this.ngxScrollToEasing = DEFAULTS.easing;
        this.ngxScrollToOffset = DEFAULTS.offset;
        this.ngxScrollToOffsetMap = DEFAULTS.offsetMap;
    }
    /**
     * Angular Lifecycle Hook - After View Init
     *
     * @todo Implement Subscription for Events
     *
     * @returns void
     */
    ngAfterViewInit() {
        // Test Event Support
        if (EVENTS.indexOf(this.ngxScrollToEvent) === -1) {
            throw new Error(`Unsupported Event '${this.ngxScrollToEvent}'`);
        }
        // Listen for the trigger...
        this.renderer2.listen(this.elementRef.nativeElement, this.ngxScrollToEvent, (event) => {
            this.options = {
                target: this.ngxScrollTo,
                duration: this.ngxScrollToDuration,
                easing: this.ngxScrollToEasing,
                offset: this.ngxScrollToOffset,
                offsetMap: this.ngxScrollToOffsetMap
            };
            this.scrollToService.scrollTo(this.options);
        });
    }
};
ScrollToDirective.ɵfac = function ScrollToDirective_Factory(t) { return new (t || ScrollToDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollToService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ScrollToDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollToDirective, selectors: [["", "ngxScrollTo", ""]], inputs: { ngxScrollTo: "ngxScrollTo", ngxScrollToEvent: "ngxScrollToEvent", ngxScrollToDuration: "ngxScrollToDuration", ngxScrollToEasing: "ngxScrollToEasing", ngxScrollToOffset: "ngxScrollToOffset", ngxScrollToOffsetMap: "ngxScrollToOffsetMap" } });
ScrollToDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ScrollToService },
    { type: Renderer2 }
];
__decorate([
    Input()
], ScrollToDirective.prototype, "ngxScrollTo", void 0);
__decorate([
    Input()
], ScrollToDirective.prototype, "ngxScrollToEvent", void 0);
__decorate([
    Input()
], ScrollToDirective.prototype, "ngxScrollToDuration", void 0);
__decorate([
    Input()
], ScrollToDirective.prototype, "ngxScrollToEasing", void 0);
__decorate([
    Input()
], ScrollToDirective.prototype, "ngxScrollToOffset", void 0);
__decorate([
    Input()
], ScrollToDirective.prototype, "ngxScrollToOffsetMap", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollToDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxScrollTo]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollToService }, { type: ɵngcc0.Renderer2 }]; }, { ngxScrollTo: [{
            type: Input
        }], ngxScrollToEvent: [{
            type: Input
        }], ngxScrollToDuration: [{
            type: Input
        }], ngxScrollToEasing: [{
            type: Input
        }], ngxScrollToOffset: [{
            type: Input
        }], ngxScrollToOffsetMap: [{
            type: Input
        }] }); })();
export { ScrollToDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQG5pY2t5LWxlbmFlcnMvbmd4LXNjcm9sbC10by9saWIvc2Nyb2xsLXRvLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUl2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUt0RCxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtBQUFHLElBc0IvQixZQUNVLFVBQXNCLEVBQ3RCLGVBQWdDLEVBQ2hDLFNBQW9CO0FBQ2hDLFFBSFksZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3ZCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtBQUFDLFFBQ2pDLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQXRCL0IsZ0JBQVcsR0FBbUIsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUNoRCxRQUVFLHFCQUFnQixHQUFrQixRQUFRLENBQUMsTUFBTSxDQUFDO0FBQ3BELFFBRUUsd0JBQW1CLEdBQVcsUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUNsRCxRQUVFLHNCQUFpQixHQUE0QixRQUFRLENBQUMsTUFBTSxDQUFDO0FBQy9ELFFBRUUsc0JBQWlCLEdBQVcsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUM5QyxRQUVFLHlCQUFvQixHQUFzQixRQUFRLENBQUMsU0FBUyxDQUFDO0FBQy9ELElBT0UsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFFSDtBQUFPO0FBRUosT0FEQztBQUNMLElBQUUsZUFBZTtBQUFLLFFBRWxCLHFCQUFxQjtBQUN6QixRQUFJLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUN0RCxZQUFNLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7QUFDdEUsU0FBSztBQUNMLFFBQ0ksNEJBQTRCO0FBQ2hDLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUN4RSxDQUFDLEtBQVksRUFBRSxFQUFFO0FBQ3ZCLFlBQ1EsSUFBSSxDQUFDLE9BQU8sR0FBRztBQUN2QixnQkFBVSxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVc7QUFDbEMsZ0JBQVUsUUFBUSxFQUFFLElBQUksQ0FBQyxtQkFBbUI7QUFDNUMsZ0JBQVUsTUFBTSxFQUFFLElBQUksQ0FBQyxpQkFBaUI7QUFDeEMsZ0JBQVUsTUFBTSxFQUFFLElBQUksQ0FBQyxpQkFBaUI7QUFDeEMsZ0JBQVUsU0FBUyxFQUFFLElBQUksQ0FBQyxvQkFBb0I7QUFDOUMsYUFBUyxDQUFDO0FBQ1YsWUFDUSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsUUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULElBQUUsQ0FBQztBQUNILENBQUM7OzZXQUFBO0FBQ0Q7QUFBMkMsWUFuQ25CLFVBQVU7QUFDaEMsWUFBMkIsZUFBZTtBQUMxQyxZQUFxQixTQUFTO0FBQUc7QUF0QmpDO0FBQWEsSUFEWixLQUFLLEVBQUU7QUFDVixzREFBZ0Q7QUFHOUM7QUFBYSxJQURaLEtBQUssRUFBRTtBQUNWLDJEQUFvRDtBQUdsRDtBQUFhLElBRFosS0FBSyxFQUFFO0FBQ1YsOERBQWtEO0FBR2hEO0FBQWEsSUFEWixLQUFLLEVBQUU7QUFDViw0REFBK0Q7QUFHN0Q7QUFBYSxJQURaLEtBQUssRUFBRTtBQUNWLDREQUE4QztBQUc1QztBQUFhLElBRFosS0FBSyxFQUFFO0FBQ1YsK0RBQStEO0FBbEJsRCxpQkFBaUIsb0JBSDdCLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRTtNQUFlLE1BQzFCLENBQUMsSUFDVztTQUFpQixDQXlEN0I7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDs7QUFyRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFzQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUF0QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUVBLEFBTUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFsQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBdEJBLEFBREEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFDQSxBQWxCQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXlEQSxBQXpEQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERFRkFVTFRTLCBFVkVOVFMgfSBmcm9tICcuL3Njcm9sbC10by1oZWxwZXJzJztcbmltcG9ydCB7IFNjcm9sbFRvQ29uZmlnT3B0aW9ucywgU2Nyb2xsVG9PZmZzZXRNYXAsIFNjcm9sbFRvVGFyZ2V0IH0gZnJvbSAnLi9zY3JvbGwtdG8tY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTY3JvbGxUb0FuaW1hdGlvbkVhc2luZyB9IGZyb20gJy4vc2Nyb2xsLXRvLWVhc2luZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU2Nyb2xsVG9FdmVudCB9IGZyb20gJy4vc2Nyb2xsLXRvLWV2ZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBTY3JvbGxUb1NlcnZpY2UgfSBmcm9tICcuL3Njcm9sbC10by5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25neFNjcm9sbFRvXSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsVG9EaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICBASW5wdXQoKVxuICBuZ3hTY3JvbGxUbzogU2Nyb2xsVG9UYXJnZXQgPSBERUZBVUxUUy50YXJnZXQ7XG5cbiAgQElucHV0KClcbiAgbmd4U2Nyb2xsVG9FdmVudDogU2Nyb2xsVG9FdmVudCA9IERFRkFVTFRTLmFjdGlvbjtcblxuICBASW5wdXQoKVxuICBuZ3hTY3JvbGxUb0R1cmF0aW9uOiBudW1iZXIgPSBERUZBVUxUUy5kdXJhdGlvbjtcblxuICBASW5wdXQoKVxuICBuZ3hTY3JvbGxUb0Vhc2luZzogU2Nyb2xsVG9BbmltYXRpb25FYXNpbmcgPSBERUZBVUxUUy5lYXNpbmc7XG5cbiAgQElucHV0KClcbiAgbmd4U2Nyb2xsVG9PZmZzZXQ6IG51bWJlciA9IERFRkFVTFRTLm9mZnNldDtcblxuICBASW5wdXQoKVxuICBuZ3hTY3JvbGxUb09mZnNldE1hcDogU2Nyb2xsVG9PZmZzZXRNYXAgPSBERUZBVUxUUy5vZmZzZXRNYXA7XG5cbiAgcHJpdmF0ZSBvcHRpb25zOiBTY3JvbGxUb0NvbmZpZ09wdGlvbnM7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgc2Nyb2xsVG9TZXJ2aWNlOiBTY3JvbGxUb1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMikge1xuICB9XG5cbiAgLyoqXG4gICAqIEFuZ3VsYXIgTGlmZWN5Y2xlIEhvb2sgLSBBZnRlciBWaWV3IEluaXRcbiAgICpcbiAgICogQHRvZG8gSW1wbGVtZW50IFN1YnNjcmlwdGlvbiBmb3IgRXZlbnRzXG4gICAqXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcblxuICAgIC8vIFRlc3QgRXZlbnQgU3VwcG9ydFxuICAgIGlmIChFVkVOVFMuaW5kZXhPZih0aGlzLm5neFNjcm9sbFRvRXZlbnQpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBFdmVudCAnJHt0aGlzLm5neFNjcm9sbFRvRXZlbnR9J2ApO1xuICAgIH1cblxuICAgIC8vIExpc3RlbiBmb3IgdGhlIHRyaWdnZXIuLi5cbiAgICB0aGlzLnJlbmRlcmVyMi5saXN0ZW4odGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMubmd4U2Nyb2xsVG9FdmVudCxcbiAgICAgIChldmVudDogRXZlbnQpID0+IHtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLm5neFNjcm9sbFRvLFxuICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLm5neFNjcm9sbFRvRHVyYXRpb24sXG4gICAgICAgICAgZWFzaW5nOiB0aGlzLm5neFNjcm9sbFRvRWFzaW5nLFxuICAgICAgICAgIG9mZnNldDogdGhpcy5uZ3hTY3JvbGxUb09mZnNldCxcbiAgICAgICAgICBvZmZzZXRNYXA6IHRoaXMubmd4U2Nyb2xsVG9PZmZzZXRNYXBcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNjcm9sbFRvU2VydmljZS5zY3JvbGxUbyh0aGlzLm9wdGlvbnMpO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==