import { NgModule, Optional } from '@angular/core';
import { FeatherComponent } from './feather.component';
import { Icons } from './icons.provider';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './icons.provider';
export class FeatherModule {
    constructor(icons) {
        this.icons = icons;
        if (!this.icons) {
            throw new Error(`No icon provided. Make sure to use 'FeatherModule.pick({ ... })' when importing the module\n` +
                `Refer to documentation on https://github.com/michaelbazos/angular-feather`);
        }
    }
    static pick(icons) {
        return {
            ngModule: FeatherModule,
            providers: [
                { provide: Icons, multi: true, useValue: icons }
            ]
        };
    }
}
FeatherModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FeatherModule });
FeatherModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FeatherModule_Factory(t) { return new (t || FeatherModule)(ɵngcc0.ɵɵinject(ɵngcc1.Icons, 8)); } });
FeatherModule.ctorParameters = () => [
    { type: Icons, decorators: [{ type: Optional }] }
];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FeatherModule, { declarations: function () { return [FeatherComponent]; }, exports: function () { return [FeatherComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FeatherModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    FeatherComponent
                ],
                exports: [
                    FeatherComponent
                ]
            }]
    }], function () { return [{ type: ɵngcc1.Icons, decorators: [{
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdGhlci5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItZmVhdGhlci9zcmMvbGliL2ZlYXRoZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQVd6QyxNQUFNLE9BQU8sYUFBYTtBQUMxQixJQUFFLFlBQ3NCLEtBQVk7QUFDakMsUUFEcUIsVUFBSyxHQUFMLEtBQUssQ0FBTztBQUNwQyxRQUNJLElBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFHO0FBQ3ZCLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FDYiw4RkFBOEY7QUFDdEcsZ0JBQVEsMkVBQTJFLENBQzVFLENBQUM7QUFDUixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQThCO0FBQUksUUFDNUMsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGFBQWE7QUFDN0IsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtBQUN4RCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7eUNBNUJDLFFBQVEsU0FBQztLQUNSLFlBQVksRUFBRSxzQkFDWixnQkFBZ0Isa0JBQ2pCLGtCQUNELE9BQU8sRUFBRSxzQkFDUCxnQkFBZ0Isa0JBQ2pCLE1BRUU7T0FESixQQUNLO0FBRUwsWUFiUSxLQUFLLHVCQWFULFFBQVE7QUFBTTs7Ozs7Ozs7Ozs7Ozs7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQTNCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQVZBLEFBQUEsQUFhQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGZWF0aGVyQ29tcG9uZW50IH0gZnJvbSAnLi9mZWF0aGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJY29ucyB9IGZyb20gJy4vaWNvbnMucHJvdmlkZXInO1xuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEZlYXRoZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIEZlYXRoZXJDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBGZWF0aGVyTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBpY29uczogSWNvbnNcbiAgKSB7XG4gICAgaWYgKCAhdGhpcy5pY29ucyApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE5vIGljb24gcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byB1c2UgJ0ZlYXRoZXJNb2R1bGUucGljayh7IC4uLiB9KScgd2hlbiBpbXBvcnRpbmcgdGhlIG1vZHVsZVxcbmAgK1xuICAgICAgICBgUmVmZXIgdG8gZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbGJhem9zL2FuZ3VsYXItZmVhdGhlcmBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBpY2soaWNvbnM6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxGZWF0aGVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBGZWF0aGVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogSWNvbnMsIG11bHRpOiB0cnVlLCB1c2VWYWx1ZTogaWNvbnMgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==