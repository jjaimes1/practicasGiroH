import Swiper from 'swiper/bundle';
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NgZone, Inject, Optional, ElementRef, Directive, Input, Output, EventEmitter, KeyValueDiffers } from '@angular/core';
import { SWIPER_CONFIG, SwiperConfig, SwiperEventNames } from './swiper.interfaces';
import * as ɵngcc0 from '@angular/core';
export class SwiperDirective {
    constructor(platformId, zone, elementRef, differs, defaults) {
        this.platformId = platformId;
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.initialIndex = null;
        this.configDiff = null;
        this.disabled = false;
        this.performance = false;
        this.indexChange = new EventEmitter();
        this.S_INIT = new EventEmitter();
        this.S_BEFOREDESTROY = new EventEmitter();
        this.S_SCROLL = new EventEmitter();
        this.S_PROGRESS = new EventEmitter();
        this.S_KEYPRESS = new EventEmitter();
        this.S_RESIZE = new EventEmitter();
        this.S_BREAKPOINT = new EventEmitter();
        this.S_ZOOMCHANGE = new EventEmitter();
        this.S_AFTERRESIZE = new EventEmitter();
        this.S_BEFORERESIZE = new EventEmitter();
        this.S_LOOPFIX = new EventEmitter();
        this.S_BEFORELOOPFIX = new EventEmitter();
        this.S_SLIDERMOVE = new EventEmitter();
        this.S_SLIDECHANGE = new EventEmitter();
        this.S_SETTRANSLATE = new EventEmitter();
        this.S_SETTRANSITION = new EventEmitter();
        this.S_FROMEDGE = new EventEmitter();
        this.S_TOEDGE = new EventEmitter();
        this.S_REACHEND = new EventEmitter();
        this.S_REACHBEGINNING = new EventEmitter();
        this.S_AUTOPLAY = new EventEmitter();
        this.S_AUTOPLAYSTART = new EventEmitter();
        this.S_AUTOPLAYSTOP = new EventEmitter();
        this.S_IMAGESREADY = new EventEmitter();
        this.S_LAZYIMAGELOAD = new EventEmitter();
        this.S_LAZYIMAGEREADY = new EventEmitter();
        this.S_SCROLLDRAGEND = new EventEmitter();
        this.S_SCROLLDRAGMOVE = new EventEmitter();
        this.S_SCROLLDRAGSTART = new EventEmitter();
        this.S_NAVIGATIONHIDE = new EventEmitter();
        this.S_NAVIGATIONSHOW = new EventEmitter();
        this.S_PAGINATIONRENDER = new EventEmitter();
        this.S_PAGINATIONUPDATE = new EventEmitter();
        this.S_PAGINATIONHIDE = new EventEmitter();
        this.S_PAGINATIONSHOW = new EventEmitter();
        this.S_TAP = new EventEmitter();
        this.S_CLICK = new EventEmitter();
        this.S_DOUBLETAP = new EventEmitter();
        this.S_TOUCHEND = new EventEmitter();
        this.S_TOUCHMOVE = new EventEmitter();
        this.S_TOUCHSTART = new EventEmitter();
        this.S_TOUCHMOVEOPPOSITE = new EventEmitter();
        this.S_TRANSITIONEND = new EventEmitter();
        this.S_TRANSITIONSTART = new EventEmitter();
        this.S_SLIDEPREVTRANSITIONEND = new EventEmitter();
        this.S_SLIDEPREVTRANSITIONSTART = new EventEmitter();
        this.S_SLIDENEXTTRANSITIONEND = new EventEmitter();
        this.S_SLIDENEXTTRANSITIONSTART = new EventEmitter();
        this.S_SLIDECHANGETRANSITIONEND = new EventEmitter();
        this.S_SLIDECHANGETRANSITIONSTART = new EventEmitter();
        this.S_OBSERVERUPDATE = new EventEmitter();
    }
    set index(index) {
        if (index != null) {
            this.setIndex(index);
        }
    }
    ngAfterViewInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const params = new SwiperConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (params.scrollbar === true) {
            params.scrollbar = {
                el: '.swiper-scrollbar'
            };
        }
        if (params.pagination === true) {
            params.pagination = {
                el: '.swiper-pagination'
            };
        }
        if (params.navigation === true) {
            params.navigation = {
                prevEl: '.swiper-button-prev',
                nextEl: '.swiper-button-next'
            };
        }
        if (this.disabled) {
            params.allowSlidePrev = false;
            params.allowSlideNext = false;
        }
        if (this.initialIndex != null) {
            params.initialSlide = this.initialIndex;
            this.initialIndex = null;
        }
        params.on = {
            slideChange: () => {
                if (this.instance && this.indexChange.observers.length) {
                    this.emit(this.indexChange, this.instance.realIndex);
                }
            }
        };
        this.zone.runOutsideAngular(() => {
            this.instance = new Swiper(this.elementRef.nativeElement, params);
        });
        if (params.init !== false && this.S_INIT.observers.length) {
            this.emit(this.S_INIT, this.instance);
        }
        // Add native Swiper event handling
        SwiperEventNames.forEach((eventName) => {
            let swiperEvent = eventName.replace('swiper', '');
            swiperEvent = swiperEvent.charAt(0).toLowerCase() + swiperEvent.slice(1);
            this.instance.on(swiperEvent, (...args) => {
                if (args.length === 1) {
                    args = args[0];
                }
                const output = `S_${swiperEvent.toUpperCase()}`;
                const emitter = this[output];
                if (emitter.observers.length) {
                    this.emit(emitter, args);
                }
            });
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.destroy(true, this.instance.initialized || false);
            });
            this.instance = null;
        }
    }
    ngDoCheck() {
        if (this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.initialIndex = this.getIndex(true);
                this.ngOnDestroy();
                this.ngAfterViewInit();
                this.update();
            }
        }
    }
    ngOnChanges(changes) {
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === true) {
                    this.zone.runOutsideAngular(() => {
                        this.ngOnDestroy();
                        this.ngAfterViewInit();
                    });
                }
                else if (changes['disabled'].currentValue === false) {
                    this.zone.runOutsideAngular(() => {
                        this.ngOnDestroy();
                        this.ngAfterViewInit();
                    });
                }
            }
        }
    }
    emit(emitter, value) {
        if (this.performance) {
            emitter.emit(value);
        }
        else {
            this.zone.run(() => emitter.emit(value));
        }
    }
    swiper() {
        return this.instance;
    }
    init() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.init();
            });
        }
    }
    update() {
        setTimeout(() => {
            if (this.instance) {
                this.zone.runOutsideAngular(() => {
                    this.instance.update();
                });
            }
        }, 0);
    }
    getIndex(real) {
        if (!this.instance) {
            return this.initialIndex || 0;
        }
        else {
            return real ? this.instance.realIndex : this.instance.activeIndex;
        }
    }
    setIndex(index, speed, silent) {
        if (!this.instance) {
            this.initialIndex = index;
        }
        else {
            let realIndex = index * this.instance.params.slidesPerGroup;
            if (this.instance.params.loop) {
                realIndex += this.instance.loopedSlides;
            }
            this.zone.runOutsideAngular(() => {
                this.instance.slideTo(realIndex, speed, !silent);
            });
        }
    }
    prevSlide(speed, silent) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.slidePrev(speed, !silent);
            });
        }
    }
    nextSlide(speed, silent) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.slideNext(speed, !silent);
            });
        }
    }
    stopAutoplay(reset) {
        if (reset) {
            this.setIndex(0);
        }
        if (this.instance && this.instance.autoplay) {
            this.zone.runOutsideAngular(() => {
                this.instance.autoplay.stop();
            });
        }
    }
    startAutoplay(reset) {
        if (reset) {
            this.setIndex(0);
        }
        if (this.instance && this.instance.autoplay) {
            this.zone.runOutsideAngular(() => {
                this.instance.autoplay.start();
            });
        }
    }
}
SwiperDirective.ɵfac = function SwiperDirective_Factory(t) { return new (t || SwiperDirective)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(SWIPER_CONFIG, 8)); };
SwiperDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SwiperDirective, selectors: [["", "swiper", ""]], inputs: { disabled: "disabled", performance: "performance", index: "index", config: ["swiper", "config"] }, outputs: { indexChange: "indexChange", S_INIT: "init", S_BEFOREDESTROY: "beforeDestroy", S_SCROLL: "scroll", S_PROGRESS: "progress", S_KEYPRESS: "keyPress", S_RESIZE: "resize", S_BREAKPOINT: "breakpoint", S_ZOOMCHANGE: "zoomChange", S_AFTERRESIZE: "afterResize", S_BEFORERESIZE: "beforeResize", S_LOOPFIX: "loopFix", S_BEFORELOOPFIX: "beforeLoopFix", S_SLIDERMOVE: "sliderMove", S_SLIDECHANGE: "slideChange", S_SETTRANSLATE: "setTranslate", S_SETTRANSITION: "setTransition", S_FROMEDGE: "fromEdge", S_TOEDGE: "toEdge", S_REACHEND: "reachEnd", S_REACHBEGINNING: "reachBeginning", S_AUTOPLAY: "autoplay", S_AUTOPLAYSTART: "autoplayStart", S_AUTOPLAYSTOP: "autoplayStop", S_IMAGESREADY: "imagesReady", S_LAZYIMAGELOAD: "lazyImageLoad", S_LAZYIMAGEREADY: "lazyImageReady", S_SCROLLDRAGEND: "scrollDragEnd", S_SCROLLDRAGMOVE: "scrollDragMove", S_SCROLLDRAGSTART: "scrollDragStart", S_NAVIGATIONHIDE: "navigationHide", S_NAVIGATIONSHOW: "navigationShow", S_PAGINATIONRENDER: "paginationRender", S_PAGINATIONUPDATE: "paginationUpdate", S_PAGINATIONHIDE: "paginationHide", S_PAGINATIONSHOW: "paginationShow", S_TAP: "swiperTap", S_CLICK: "swiperClick", S_DOUBLETAP: "swiperDoubleTap", S_TOUCHEND: "swiperTouchEnd", S_TOUCHMOVE: "swiperTouchMove", S_TOUCHSTART: "swiperTouchStart", S_TOUCHMOVEOPPOSITE: "swiperTouchMoveOpposite", S_TRANSITIONEND: "swiperTransitionEnd", S_TRANSITIONSTART: "swiperTransitionStart", S_SLIDEPREVTRANSITIONEND: "slidePrevTransitionEnd", S_SLIDEPREVTRANSITIONSTART: "slidePrevTransitionStart", S_SLIDENEXTTRANSITIONEND: "slideNextTransitionEnd", S_SLIDENEXTTRANSITIONSTART: "slideNextTransitionStart", S_SLIDECHANGETRANSITIONEND: "slideChangeTransitionEnd", S_SLIDECHANGETRANSITIONSTART: "slideChangeTransitionStart", S_OBSERVERUPDATE: "observerUpdate" }, exportAs: ["ngxSwiper"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
SwiperDirective.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SWIPER_CONFIG,] }] }
];
SwiperDirective.propDecorators = {
    index: [{ type: Input }],
    disabled: [{ type: Input }],
    performance: [{ type: Input }],
    config: [{ type: Input, args: ['swiper',] }],
    indexChange: [{ type: Output }],
    S_INIT: [{ type: Output, args: ['init',] }],
    S_BEFOREDESTROY: [{ type: Output, args: ['beforeDestroy',] }],
    S_SCROLL: [{ type: Output, args: ['scroll',] }],
    S_PROGRESS: [{ type: Output, args: ['progress',] }],
    S_KEYPRESS: [{ type: Output, args: ['keyPress',] }],
    S_RESIZE: [{ type: Output, args: ['resize',] }],
    S_BREAKPOINT: [{ type: Output, args: ['breakpoint',] }],
    S_ZOOMCHANGE: [{ type: Output, args: ['zoomChange',] }],
    S_AFTERRESIZE: [{ type: Output, args: ['afterResize',] }],
    S_BEFORERESIZE: [{ type: Output, args: ['beforeResize',] }],
    S_LOOPFIX: [{ type: Output, args: ['loopFix',] }],
    S_BEFORELOOPFIX: [{ type: Output, args: ['beforeLoopFix',] }],
    S_SLIDERMOVE: [{ type: Output, args: ['sliderMove',] }],
    S_SLIDECHANGE: [{ type: Output, args: ['slideChange',] }],
    S_SETTRANSLATE: [{ type: Output, args: ['setTranslate',] }],
    S_SETTRANSITION: [{ type: Output, args: ['setTransition',] }],
    S_FROMEDGE: [{ type: Output, args: ['fromEdge',] }],
    S_TOEDGE: [{ type: Output, args: ['toEdge',] }],
    S_REACHEND: [{ type: Output, args: ['reachEnd',] }],
    S_REACHBEGINNING: [{ type: Output, args: ['reachBeginning',] }],
    S_AUTOPLAY: [{ type: Output, args: ['autoplay',] }],
    S_AUTOPLAYSTART: [{ type: Output, args: ['autoplayStart',] }],
    S_AUTOPLAYSTOP: [{ type: Output, args: ['autoplayStop',] }],
    S_IMAGESREADY: [{ type: Output, args: ['imagesReady',] }],
    S_LAZYIMAGELOAD: [{ type: Output, args: ['lazyImageLoad',] }],
    S_LAZYIMAGEREADY: [{ type: Output, args: ['lazyImageReady',] }],
    S_SCROLLDRAGEND: [{ type: Output, args: ['scrollDragEnd',] }],
    S_SCROLLDRAGMOVE: [{ type: Output, args: ['scrollDragMove',] }],
    S_SCROLLDRAGSTART: [{ type: Output, args: ['scrollDragStart',] }],
    S_NAVIGATIONHIDE: [{ type: Output, args: ['navigationHide',] }],
    S_NAVIGATIONSHOW: [{ type: Output, args: ['navigationShow',] }],
    S_PAGINATIONRENDER: [{ type: Output, args: ['paginationRender',] }],
    S_PAGINATIONUPDATE: [{ type: Output, args: ['paginationUpdate',] }],
    S_PAGINATIONHIDE: [{ type: Output, args: ['paginationHide',] }],
    S_PAGINATIONSHOW: [{ type: Output, args: ['paginationShow',] }],
    S_TAP: [{ type: Output, args: ['swiperTap',] }],
    S_CLICK: [{ type: Output, args: ['swiperClick',] }],
    S_DOUBLETAP: [{ type: Output, args: ['swiperDoubleTap',] }],
    S_TOUCHEND: [{ type: Output, args: ['swiperTouchEnd',] }],
    S_TOUCHMOVE: [{ type: Output, args: ['swiperTouchMove',] }],
    S_TOUCHSTART: [{ type: Output, args: ['swiperTouchStart',] }],
    S_TOUCHMOVEOPPOSITE: [{ type: Output, args: ['swiperTouchMoveOpposite',] }],
    S_TRANSITIONEND: [{ type: Output, args: ['swiperTransitionEnd',] }],
    S_TRANSITIONSTART: [{ type: Output, args: ['swiperTransitionStart',] }],
    S_SLIDEPREVTRANSITIONEND: [{ type: Output, args: ['slidePrevTransitionEnd',] }],
    S_SLIDEPREVTRANSITIONSTART: [{ type: Output, args: ['slidePrevTransitionStart',] }],
    S_SLIDENEXTTRANSITIONEND: [{ type: Output, args: ['slideNextTransitionEnd',] }],
    S_SLIDENEXTTRANSITIONSTART: [{ type: Output, args: ['slideNextTransitionStart',] }],
    S_SLIDECHANGETRANSITIONEND: [{ type: Output, args: ['slideChangeTransitionEnd',] }],
    S_SLIDECHANGETRANSITIONSTART: [{ type: Output, args: ['slideChangeTransitionStart',] }],
    S_OBSERVERUPDATE: [{ type: Output, args: ['observerUpdate',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwiperDirective, [{
        type: Directive,
        args: [{
                selector: '[swiper]',
                exportAs: 'ngxSwiper'
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.KeyValueDiffers }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SWIPER_CONFIG]
            }] }]; }, { disabled: [{
            type: Input
        }], performance: [{
            type: Input
        }], indexChange: [{
            type: Output
        }], S_INIT: [{
            type: Output,
            args: ['init']
        }], S_BEFOREDESTROY: [{
            type: Output,
            args: ['beforeDestroy']
        }], S_SCROLL: [{
            type: Output,
            args: ['scroll']
        }], S_PROGRESS: [{
            type: Output,
            args: ['progress']
        }], S_KEYPRESS: [{
            type: Output,
            args: ['keyPress']
        }], S_RESIZE: [{
            type: Output,
            args: ['resize']
        }], S_BREAKPOINT: [{
            type: Output,
            args: ['breakpoint']
        }], S_ZOOMCHANGE: [{
            type: Output,
            args: ['zoomChange']
        }], S_AFTERRESIZE: [{
            type: Output,
            args: ['afterResize']
        }], S_BEFORERESIZE: [{
            type: Output,
            args: ['beforeResize']
        }], S_LOOPFIX: [{
            type: Output,
            args: ['loopFix']
        }], S_BEFORELOOPFIX: [{
            type: Output,
            args: ['beforeLoopFix']
        }], S_SLIDERMOVE: [{
            type: Output,
            args: ['sliderMove']
        }], S_SLIDECHANGE: [{
            type: Output,
            args: ['slideChange']
        }], S_SETTRANSLATE: [{
            type: Output,
            args: ['setTranslate']
        }], S_SETTRANSITION: [{
            type: Output,
            args: ['setTransition']
        }], S_FROMEDGE: [{
            type: Output,
            args: ['fromEdge']
        }], S_TOEDGE: [{
            type: Output,
            args: ['toEdge']
        }], S_REACHEND: [{
            type: Output,
            args: ['reachEnd']
        }], S_REACHBEGINNING: [{
            type: Output,
            args: ['reachBeginning']
        }], S_AUTOPLAY: [{
            type: Output,
            args: ['autoplay']
        }], S_AUTOPLAYSTART: [{
            type: Output,
            args: ['autoplayStart']
        }], S_AUTOPLAYSTOP: [{
            type: Output,
            args: ['autoplayStop']
        }], S_IMAGESREADY: [{
            type: Output,
            args: ['imagesReady']
        }], S_LAZYIMAGELOAD: [{
            type: Output,
            args: ['lazyImageLoad']
        }], S_LAZYIMAGEREADY: [{
            type: Output,
            args: ['lazyImageReady']
        }], S_SCROLLDRAGEND: [{
            type: Output,
            args: ['scrollDragEnd']
        }], S_SCROLLDRAGMOVE: [{
            type: Output,
            args: ['scrollDragMove']
        }], S_SCROLLDRAGSTART: [{
            type: Output,
            args: ['scrollDragStart']
        }], S_NAVIGATIONHIDE: [{
            type: Output,
            args: ['navigationHide']
        }], S_NAVIGATIONSHOW: [{
            type: Output,
            args: ['navigationShow']
        }], S_PAGINATIONRENDER: [{
            type: Output,
            args: ['paginationRender']
        }], S_PAGINATIONUPDATE: [{
            type: Output,
            args: ['paginationUpdate']
        }], S_PAGINATIONHIDE: [{
            type: Output,
            args: ['paginationHide']
        }], S_PAGINATIONSHOW: [{
            type: Output,
            args: ['paginationShow']
        }], S_TAP: [{
            type: Output,
            args: ['swiperTap']
        }], S_CLICK: [{
            type: Output,
            args: ['swiperClick']
        }], S_DOUBLETAP: [{
            type: Output,
            args: ['swiperDoubleTap']
        }], S_TOUCHEND: [{
            type: Output,
            args: ['swiperTouchEnd']
        }], S_TOUCHMOVE: [{
            type: Output,
            args: ['swiperTouchMove']
        }], S_TOUCHSTART: [{
            type: Output,
            args: ['swiperTouchStart']
        }], S_TOUCHMOVEOPPOSITE: [{
            type: Output,
            args: ['swiperTouchMoveOpposite']
        }], S_TRANSITIONEND: [{
            type: Output,
            args: ['swiperTransitionEnd']
        }], S_TRANSITIONSTART: [{
            type: Output,
            args: ['swiperTransitionStart']
        }], S_SLIDEPREVTRANSITIONEND: [{
            type: Output,
            args: ['slidePrevTransitionEnd']
        }], S_SLIDEPREVTRANSITIONSTART: [{
            type: Output,
            args: ['slidePrevTransitionStart']
        }], S_SLIDENEXTTRANSITIONEND: [{
            type: Output,
            args: ['slideNextTransitionEnd']
        }], S_SLIDENEXTTRANSITIONSTART: [{
            type: Output,
            args: ['slideNextTransitionStart']
        }], S_SLIDECHANGETRANSITIONEND: [{
            type: Output,
            args: ['slideChangeTransitionEnd']
        }], S_SLIDECHANGETRANSITIONSTART: [{
            type: Output,
            args: ['slideChangeTransitionStart']
        }], S_OBSERVERUPDATE: [{
            type: Output,
            args: ['observerUpdate']
        }], index: [{
            type: Input
        }], config: [{
            type: Input,
            args: ['swiper']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,