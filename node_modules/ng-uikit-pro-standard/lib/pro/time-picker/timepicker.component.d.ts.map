{"version":3,"file":"timepicker.component.d.ts","sources":["timepicker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentChecked, AfterViewInit, ElementRef, EventEmitter, OnInit, Renderer2, ChangeDetectorRef, NgZone } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nexport declare const TIME_PIRCKER_VALUE_ACCESSOT: any;\r\nexport declare class ClockPickerComponent implements OnInit, AfterViewInit, ControlValueAccessor, AfterContentChecked {\r\n    elem: ElementRef;\r\n    renderer: Renderer2;\r\n    private _cdRef;\r\n    private _ngZone;\r\n    private _document;\r\n    hoursPlate: ElementRef;\r\n    minutesPlate: ElementRef;\r\n    plate: ElementRef;\r\n    svg: ElementRef;\r\n    g: ElementRef;\r\n    hand: ElementRef;\r\n    fg: ElementRef;\r\n    bg: ElementRef;\r\n    bearing: ElementRef;\r\n    twelvehour: boolean;\r\n    darktheme: boolean;\r\n    placeholder: String;\r\n    label: string;\r\n    duration: number;\r\n    showClock: boolean;\r\n    buttonLabel: string;\r\n    disabled: boolean;\r\n    tabIndex: any;\r\n    outlineInput: boolean;\r\n    openOnFocus: boolean;\r\n    readonly: boolean;\r\n    timeChanged: EventEmitter<string>;\r\n    isOpen: boolean;\r\n    isMobile: any;\r\n    touchDevice: boolean;\r\n    showHours: boolean;\r\n    moveEvent: string;\r\n    tapEvent: string;\r\n    elements: HTMLCollectionOf<Element>;\r\n    elementNumber: any;\r\n    dialRadius: number;\r\n    outerRadius: number;\r\n    innerRadius: number;\r\n    tickRadius: number;\r\n    diameter: number;\r\n    isBrowser: any;\r\n    hoursTicks: any;\r\n    minutesTicks: any;\r\n    selectedHours: any;\r\n    endHours: string;\r\n    touchSupported: any;\r\n    mousedownEvent: any;\r\n    mousemoveEvent: any;\r\n    mouseupEvent: any;\r\n    isMouseDown: boolean;\r\n    documentClickFun: Function;\r\n    constructor(elem: ElementRef, renderer: Renderer2, _cdRef: ChangeDetectorRef, _ngZone: NgZone, _document: any, platformId: string);\r\n    ontouchmove(event: any): void;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngAfterContentChecked(): void;\r\n    checkDraw(): void;\r\n    mousedown(e: any, space?: any): void;\r\n    hideKeyboard(): void;\r\n    onFocusInput(): void;\r\n    openBtnClicked(): void;\r\n    private _handleOutsideClick;\r\n    closeBtnClicked(): void;\r\n    close(): void;\r\n    clearTimeInput(): void;\r\n    setHour(hour: String): void;\r\n    setMinute(min: String): void;\r\n    setAmPm(ampm: String): void;\r\n    showHoursClock(): void;\r\n    showMinutesClock(): void;\r\n    generateTick(): void;\r\n    setHand(x: any, y: any, roundBy5: any): void;\r\n    offset(obj: any): {\r\n        left: number;\r\n        top: number;\r\n    };\r\n    private _getFormattedTime;\r\n    onChangeCb: (_: any) => void;\r\n    onTouchedCb: () => void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n}\r\n"]}