{"version":3,"file":"toast.service.d.ts","sources":["toast.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Injector, ComponentRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Overlay } from '../overlay/overlay';\r\nimport { GlobalConfig, IndividualConfig } from './toast.config';\r\nimport { ToastContainerDirective } from './toast.directive';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { ToastRef } from './toast-ref';\r\nexport interface ActiveToast {\r\n    toastId?: number;\r\n    message?: string;\r\n    portal?: ComponentRef<any>;\r\n    toastRef?: ToastRef<any>;\r\n    onShown?: Observable<any>;\r\n    onHidden?: Observable<any>;\r\n    onTap?: Observable<any>;\r\n    onAction?: Observable<any>;\r\n}\r\nexport declare class ToastService {\r\n    toastConfig: GlobalConfig | any;\r\n    private overlay;\r\n    private _injector;\r\n    private sanitizer;\r\n    index: number;\r\n    previousToastMessage: string;\r\n    currentlyActive: number;\r\n    toasts: ActiveToast[];\r\n    overlayContainer: ToastContainerDirective;\r\n    constructor(toastConfig: GlobalConfig | any, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer);\r\n    /** show successful toast */\r\n    show(message: string, title?: string | any, override?: IndividualConfig | any, type?: string): any;\r\n    /** show successful toast */\r\n    success(message: string, title?: string | any, override?: IndividualConfig): any;\r\n    /** show error toast */\r\n    error(message: string, title?: string | any, override?: IndividualConfig): any;\r\n    /** show info toast */\r\n    info(message: string, title?: string | any, override?: IndividualConfig): any;\r\n    /** show warning toast */\r\n    warning(message: string, title?: string | any, override?: IndividualConfig): any;\r\n    /**\r\n     * Remove all or a single toast by id\r\n     */\r\n    clear(toastId?: number): void;\r\n    /**\r\n     * Remove and destroy a single toast by id\r\n     */\r\n    remove(toastId: number): boolean;\r\n    /**\r\n     * Determines if toast message is already shown\r\n     */\r\n    isDuplicate(message: string): boolean;\r\n    /** create a clone of global config and apply individual settings */\r\n    private applyConfig;\r\n    /**\r\n     * Find toast object by id\r\n     */\r\n    private _findToast;\r\n    /**\r\n     * Creates and attaches toast data to component\r\n     * returns null if toast is duplicate and preventDuplicates == True\r\n     */\r\n    private _buildNotification;\r\n}\r\n"]}