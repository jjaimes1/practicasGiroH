{"version":3,"file":"progress-spinner.component.d.ts","sources":["progress-spinner.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, ElementRef, NgZone, Renderer2 } from '@angular/core';\r\nexport declare type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\nexport declare class MdProgressSpinnerCssMatStylerDirective {\r\n    true: any;\r\n}\r\n/**\r\n * <md-progress-spinner> component.\r\n */\r\nexport declare class MdProgressSpinnerComponent implements OnDestroy {\r\n    private _ngZone;\r\n    private _elementRef;\r\n    private _renderer;\r\n    /** The id of the last requested animation. */\r\n    private _lastAnimationId;\r\n    /** The id of the indeterminate interval. */\r\n    private _interdeterminateInterval;\r\n    /** The SVG <path> node that is used to draw the circle. */\r\n    private _path;\r\n    private _mode;\r\n    private _value;\r\n    private _color;\r\n    isBrowser: any;\r\n    platformId: string;\r\n    /**\r\n     * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\r\n     * because voiceover does not report the progress indicator as indeterminate if the aria min\r\n     * and/or max value are number values.\r\n     */\r\n    readonly _ariaValueMin: 0 | null;\r\n    readonly _ariaValueMax: 100 | null;\r\n    /** @docs-private */\r\n    /** @docs-private */\r\n    interdeterminateInterval: any;\r\n    /**\r\n     * Clean up any animations that were running.\r\n     */\r\n    ngOnDestroy(): void;\r\n    /** The color of the progress-spinner. Can be primary, accent, or warn. */\r\n    color: string;\r\n    /** Value of the progress circle. It is bound to the host as the attribute aria-valuenow. */\r\n    value: any;\r\n    /**\r\n     * Mode of the progress circle\r\n     *\r\n     * Input must be one of the values from ProgressMode, defaults to 'determinate'.\r\n     * mode is bound to the host as the attribute host.\r\n     */\r\n    mode: ProgressSpinnerMode;\r\n    constructor(_ngZone: NgZone, _elementRef: ElementRef, _renderer: Renderer2, platformId?: string | any);\r\n    /**\r\n     * Animates the circle from one percentage value to another.\r\n     *\r\n     * @param animateFrom The percentage of the circle filled starting the animation.\r\n     * @param animateTo The percentage of the circle filled ending the animation.\r\n     * @param ease The easing function to manage the pace of change in the animation.\r\n     * @param duration The length of time to show the animation, in milliseconds.\r\n     * @param rotation The starting angle of the circle fill, with 0Â° represented at the top center\r\n     *    of the circle.\r\n     */\r\n    private _animateCircle;\r\n    /**\r\n     * Starts the indeterminate animation interval, if it is not already running.\r\n     */\r\n    private _startIndeterminateAnimation;\r\n    /**\r\n     * Removes interval, ending the animation.\r\n     */\r\n    private _cleanupIndeterminateAnimation;\r\n    /**\r\n     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\r\n     * DOM attribute on the `<path>`.\r\n     */\r\n    private _renderArc;\r\n    /**\r\n     * Updates the color of the progress-spinner by adding the new palette class to the element\r\n     * and removing the old one.\r\n     */\r\n    private _updateColor;\r\n    /** Sets the given palette class on the component element. */\r\n    private _setElementColor;\r\n}\r\n/**\r\n * <md-spinner> component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate <md-progress-spinner> instance.\r\n */\r\nexport declare class MdSpinnerComponent extends MdProgressSpinnerComponent implements OnDestroy {\r\n    true: any;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2);\r\n    ngOnDestroy(): void;\r\n}\r\n"]}