{"version":3,"file":"tabset.component.d.ts","sources":["tabset.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { TabDirective } from './tab.directive';\r\nimport { TabsetConfig } from './tabset.config';\r\nimport { WavesDirective } from '../../free/waves/waves-effect.directive';\r\nexport declare class TabsetComponent implements OnDestroy, OnInit, AfterViewInit {\r\n    ripple: WavesDirective;\r\n    private cdRef;\r\n    private renderer;\r\n    tabs: TabDirective[];\r\n    classMap: any;\r\n    protected isDestroyed: boolean;\r\n    protected _vertical: boolean;\r\n    protected _justified: boolean;\r\n    protected _type: string;\r\n    listGetClass: String;\r\n    tabsGetClass: String;\r\n    isBrowser: any;\r\n    clazz: boolean;\r\n    disableWaves: boolean;\r\n    buttonClass: String;\r\n    contentClass: String;\r\n    tabsButtonsClass: string;\r\n    tabsContentClass: string;\r\n    itemsList: ElementRef;\r\n    tabEl: any;\r\n    showBsTab: EventEmitter<any>;\r\n    shownBsTab: EventEmitter<any>;\r\n    hideBsTab: EventEmitter<any>;\r\n    hiddenBsTab: EventEmitter<any>;\r\n    getActiveTab: EventEmitter<any>;\r\n    /** if true tabs will be placed vertically */\r\n    vertical: boolean;\r\n    setActiveTab(index: number): void;\r\n    /** if true tabs fill the container and have a consistent width */\r\n    justified: boolean;\r\n    /** navigation context class: 'tabs' or 'pills' */\r\n    type: string;\r\n    constructor(platformId: string, config: TabsetConfig, ripple: WavesDirective, cdRef: ChangeDetectorRef, renderer: Renderer2);\r\n    click(event: any, index: any): void;\r\n    ngOnDestroy(): void;\r\n    getActive(): any;\r\n    addTab(tab: TabDirective): void;\r\n    removeTab(tab: TabDirective): void;\r\n    protected getClosestTabIndex(index: number): number;\r\n    protected hasAvailableTabs(index: number): boolean;\r\n    protected setClassMap(): void;\r\n    listGet(): void;\r\n    tabsGet(): void;\r\n    getActiveElement(): any;\r\n    showActiveIndex(): void;\r\n    private getFirstActiveTabIndex;\r\n    private removeActiveTabs;\r\n    initActiveTab(): void;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n}\r\n"]}