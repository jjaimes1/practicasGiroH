{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { TooltipConfig } from './tooltip.service';\r\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\r\nimport { PositioningService } from '../utils/positioning/positioning.service';\r\nexport declare class TooltipDirective implements OnInit, OnDestroy, OnChanges {\r\n    private _elementRef;\r\n    private _positionService;\r\n    private platformId;\r\n    /**\r\n     * Content to be displayed as tooltip.\r\n     */\r\n    mdbTooltip: string | TemplateRef<any>;\r\n    /** Fired when tooltip content changes */\r\n    tooltipChange: EventEmitter<string | TemplateRef<any>>;\r\n    /**\r\n     * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n     */\r\n    placement: string;\r\n    /**\r\n     * Specifies events that should trigger. Supports a space separated list of\r\n     * event names.\r\n     */\r\n    triggers: string;\r\n    /**\r\n     * A selector specifying the element the tooltip should be appended to.\r\n     * Currently only supports \"body\".\r\n     */\r\n    container: string;\r\n    /**\r\n     * Returns whether or not the tooltip is currently being shown\r\n     */\r\n    isOpen: boolean;\r\n    /**\r\n     * Allows to disable tooltip\r\n     */\r\n    isDisabled: boolean;\r\n    dynamicPosition: boolean;\r\n    /**\r\n     * Emits an event when the tooltip is shown\r\n     */\r\n    onShown: EventEmitter<any>;\r\n    shown: EventEmitter<any>;\r\n    /**\r\n     * Emits an event when the tooltip is hidden\r\n     */\r\n    onHidden: EventEmitter<any>;\r\n    hidden: EventEmitter<any>;\r\n    delay: number;\r\n    customHeight: string;\r\n    fadeDuration: number;\r\n    private _destroy$;\r\n    protected _delayTimeoutId: any;\r\n    private _tooltip;\r\n    isBrowser: any;\r\n    constructor(_renderer: Renderer2, _elementRef: ElementRef, _positionService: PositioningService, _viewContainerRef: ViewContainerRef, cis: ComponentLoaderFactory, config: TooltipConfig, platformId: string);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of\r\n     * the tooltip.\r\n     */\r\n    toggle(): void;\r\n    /**\r\n     * Opens an element’s tooltip. This is considered a “manual” triggering of\r\n     * the tooltip.\r\n     */\r\n    show(): void;\r\n    private showTooltip;\r\n    /**\r\n     * Closes an element’s tooltip. This is considered a “manual” triggering of\r\n     * the tooltip.\r\n     */\r\n    hide(): void;\r\n    dispose(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}