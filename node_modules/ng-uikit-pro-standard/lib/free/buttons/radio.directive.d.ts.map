{"version":3,"file":"radio.directive.d.ts","sources":["radio.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnInit, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nexport declare const RADIO_CONTROL_VALUE_ACCESSOR: any;\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\nexport declare class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n    protected el: ElementRef;\r\n    private renderer;\r\n    onChange: any;\r\n    onTouched: any;\r\n    radioElementsArray: Array<any>;\r\n    /** Radio button value, will be set to `ngModel` */\r\n    mdbRadio: any;\r\n    /** If `true` â€” radio button can be unchecked */\r\n    uncheckable: boolean;\r\n    /** Current value of radio component or group */\r\n    value: any;\r\n    readonly isActive: boolean;\r\n    onClick(event?: any): void;\r\n    constructor(el: ElementRef, renderer: Renderer2);\r\n    ngOnInit(): void;\r\n    onBlur(): void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n}\r\n"]}