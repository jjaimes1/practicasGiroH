{"version":3,"file":"popover.directive.d.ts","sources":["popover.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, OnDestroy, Renderer2, ElementRef, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\r\nimport { PositioningService } from '../utils/positioning/positioning.service';\r\n/**\r\n * A lightweight, extensible directive for fancy popover creation.\r\n */\r\nexport declare class PopoverDirective implements OnInit, OnDestroy {\r\n    private _positionService;\r\n    containerClass: string;\r\n    bodyClass: string;\r\n    headerClass: string;\r\n    /**\r\n     * Content to be displayed as popover.\r\n     */\r\n    mdbPopover: string | TemplateRef<any>;\r\n    /**\r\n     * Title of a popover.\r\n     */\r\n    mdbPopoverHeader: string;\r\n    popoverTitle: string;\r\n    /**\r\n     * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n     */\r\n    placement: 'top' | 'bottom' | 'left' | 'right';\r\n    /**\r\n     * Specifies events that should trigger. Supports a space separated list of\r\n     * event names.\r\n     */\r\n    triggers: string;\r\n    /**\r\n     * A selector specifying the element the popover should be appended to.\r\n     * Currently only supports \"body\".\r\n     */\r\n    container: string;\r\n    /**\r\n     * Returns whether or not the popover is currently being shown\r\n     */\r\n    isOpen: boolean;\r\n    dynamicPosition: boolean;\r\n    outsideClick: boolean;\r\n    /**\r\n     * Emits an event when the popover is shown\r\n     */\r\n    onShown: EventEmitter<any>;\r\n    shown: EventEmitter<any>;\r\n    /**\r\n     * Emits an event when the popover is hidden\r\n     */\r\n    onHidden: EventEmitter<any>;\r\n    hidden: EventEmitter<any>;\r\n    private _popover;\r\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _viewContainerRef: ViewContainerRef, _config: PopoverConfig, cis: ComponentLoaderFactory, _positionService: PositioningService);\r\n    /**\r\n     * Opens an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\r\n    show(): void | any;\r\n    /**\r\n     * Closes an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\r\n    hide(): void;\r\n    /**\r\n     * Toggles an element’s popover. This is considered a “manual” triggering of\r\n     * the popover.\r\n     */\r\n    toggle(): void;\r\n    onclick(event: any): void;\r\n    onblur(): void;\r\n    onTouchStart(event: any): void;\r\n    ngOnInit(): any;\r\n    dispose(): void;\r\n    ngOnDestroy(): any;\r\n}\r\n"]}