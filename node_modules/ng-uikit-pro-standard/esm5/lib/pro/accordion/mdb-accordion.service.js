/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var MdbAccordionService = /** @class */ (function () {
    function MdbAccordionService() {
        this._items = [];
        this._multiple = false;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    MdbAccordionService.prototype.addItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this._items.push(item);
    };
    /**
     * @param {?} items
     * @return {?}
     */
    MdbAccordionService.prototype.updateItemsArray = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this._items = tslib_1.__spread(items);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdbAccordionService.prototype.updateMultipleState = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._multiple = value;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    MdbAccordionService.prototype.didItemToggled = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        // on not multiple, it will collpase the rest of items
        if (!this._multiple) {
            this._items.forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                if (el !== item) {
                    el.applyToggle(true);
                }
                if (el === item) {
                    /** @type {?} */
                    var collapsed_1 = el.collapsed ? true : false;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        el.applyToggle(collapsed_1);
                    }), 0);
                }
            }));
        }
    };
MdbAccordionService.ɵfac = function MdbAccordionService_Factory(t) { return new (t || MdbAccordionService)(); };
MdbAccordionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MdbAccordionService, factory: function (t) { return MdbAccordionService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbAccordionService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return MdbAccordionService;
}());
export { MdbAccordionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MdbAccordionService.prototype._items;
    /**
     * @type {?}
     * @private
     */
    MdbAccordionService.prototype._multiple;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWFjY29yZGlvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9hY2NvcmRpb24vbWRiLWFjY29yZGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFHekM7QUFFTSxJQUZOO0FBQ21CLFFBQ1QsV0FBTSxHQUFzQixFQUFFLENBQUM7QUFDekMsUUFBVSxjQUFTLEdBQUcsS0FBSyxDQUFDO0FBQzVCLElBOEJBLENBQUM7QUFDRDtBQUFRO0FBQXVCO0FBQW1CO0FBQVEsSUE5QnhELHFDQUFPO0FBQU87QUFDWjtBQUFtQjtBQUNwQixJQUZELFVBQVEsSUFBcUI7QUFDL0IsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQXdCO0FBQzVCO0FBQVEsSUFEViw4Q0FBZ0I7QUFBTztBQUN2QjtBQUFtQjtBQUFRLElBRDNCLFVBQWlCLEtBQXdCO0FBQzNDLFFBQUksSUFBSSxDQUFDLE1BQU0sb0JBQU8sS0FBSyxDQUFDLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUF3QjtBQUNyQjtBQUFRLElBRGpCLGlEQUFtQjtBQUFPO0FBQ2hCO0FBQ1Q7QUFFRyxJQUpKLFVBQW9CLEtBQWM7QUFDcEMsUUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztBQUMzQixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQXVCO0FBQ3ZCO0FBQVEsSUFEZCw0Q0FBYztBQUFPO0FBQ25CO0FBQW1CO0FBQVEsSUFEN0IsVUFBZSxJQUFxQjtBQUN0QyxRQUFJLHNEQUFzRDtBQUMxRCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3pCLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPO0FBQU07QUFDWjtBQUNBO0FBQ2hCLFlBSHVCLFVBQUMsRUFBTztBQUFJLGdCQUM5QixJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUU7QUFDekIsb0JBQVUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixpQkFBUztBQUNULGdCQUFRLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtBQUN6QjtBQUFxQyx3QkFBckIsV0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztBQUN2RCxvQkFBVSxVQUFVO0FBQU07QUFDTTtBQUVoQyxvQkFIcUI7QUFDZix3QkFBTSxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVMsQ0FBQyxDQUFDO0FBQ3RDLG9CQUFVLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztBQUNoQixpQkFBUztBQUNULFlBQU0sQ0FBQyxFQUFDLENBQUM7QUFDVCxTQUFLO0FBQ0wsSUFBRSxDQUFDO3VEQWhDRixVQUFVOzs7O2dEQUNMO0FBQUMsSUFpQ1AsMEJBQUM7QUFDQSxDQURBLEFBbENELElBa0NDO0FBQ0QsU0FsQ2EsbUJBQW1CO0FBQy9CO0FBQWE7QUFBUTtBQUFpQjtBQUMxQjtBQUFRLElBRG5CLHFDQUF1QztBQUN6QztBQUFRO0FBQWlCO0FBRWQ7QUFBUSxJQUZqQix3Q0FBMEI7O0FBTkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQStCQSxBQUFBLEFBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQWhDQSxBQUFBLEFBa0NBLEFBQUEsQUFBQSxBQWxDQSxBQWtDQSxBQWpDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU0JJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3NiLWl0ZW0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWRiQWNjb3JkaW9uU2VydmljZSB7XG4gIHByaXZhdGUgX2l0ZW1zOiBTQkl0ZW1Db21wb25lbnRbXSA9IFtdO1xuICBwcml2YXRlIF9tdWx0aXBsZSA9IGZhbHNlO1xuXG4gIGFkZEl0ZW0oaXRlbTogU0JJdGVtQ29tcG9uZW50KSB7XG4gICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcbiAgfVxuXG4gIHVwZGF0ZUl0ZW1zQXJyYXkoaXRlbXM6IFNCSXRlbUNvbXBvbmVudFtdKSB7XG4gICAgdGhpcy5faXRlbXMgPSBbLi4uaXRlbXNdO1xuICB9XG5cbiAgdXBkYXRlTXVsdGlwbGVTdGF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX211bHRpcGxlID0gdmFsdWU7XG4gIH1cblxuICBkaWRJdGVtVG9nZ2xlZChpdGVtOiBTQkl0ZW1Db21wb25lbnQpIHtcbiAgICAvLyBvbiBub3QgbXVsdGlwbGUsIGl0IHdpbGwgY29sbHBhc2UgdGhlIHJlc3Qgb2YgaXRlbXNcbiAgICBpZiAoIXRoaXMuX211bHRpcGxlKSB7XG4gICAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChlbDogYW55KSA9PiB7XG4gICAgICAgIGlmIChlbCAhPT0gaXRlbSkge1xuICAgICAgICAgIGVsLmFwcGx5VG9nZ2xlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbCA9PT0gaXRlbSkge1xuICAgICAgICAgIGNvbnN0IGNvbGxhcHNlZCA9IGVsLmNvbGxhcHNlZCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVsLmFwcGx5VG9nZ2xlKGNvbGxhcHNlZCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=