/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, Inject, Optional, HostListener, } from '@angular/core';
import { Router, NavigationEnd, NavigationError, NavigationCancel } from '@angular/router';
import { DOCUMENT } from '@angular/common';
import { PageScrollService } from './mdb-page-scroll.service';
import { PageScrollInstance } from './mdb-page-scroll.instance';
import { PageScrollUtilService as Util } from './mdb-page-scroll-util.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './mdb-page-scroll.service';
import * as ɵngcc2 from '@angular/router';
var PageScrollDirective = /** @class */ (function () {
    function PageScrollDirective(pageScrollService, router, document) {
        this.pageScrollService = pageScrollService;
        this.router = router;
        this.pageScrollHorizontal = null;
        this.pageScrollOffset = null;
        this.pageScrollDuration = null;
        this.pageScrollSpeed = null;
        this.pageScrollEasing = null;
        this.pageScrollAdjustHash = false;
        this.pageScroll = null;
        this.pageScrollFinish = new EventEmitter();
        this.document = (/** @type {?} */ (document));
    }
    /**
     * @return {?}
     */
    PageScrollDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        // Some inputs changed, reset the pageScrollInstance
        this.pageScrollInstance = undefined;
    };
    /**
     * @return {?}
     */
    PageScrollDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.pageScrollInstance) {
            this.pageScrollService.stop(this.pageScrollInstance);
        }
        return undefined;
    };
    /**
     * @private
     * @return {?}
     */
    PageScrollDirective.prototype.generatePageScrollInstance = /**
     * @private
     * @return {?}
     */
    function () {
        if (Util.isUndefinedOrNull(this.pageScrollInstance)) {
            this.pageScrollInstance = PageScrollInstance.newInstance({
                document: this.document,
                scrollTarget: this.href,
                scrollingViews: null,
                namespace: this.pageScroll,
                verticalScrolling: !this.pageScrollHorizontal,
                pageScrollOffset: this.pageScrollOffset,
                pageScrollInterruptible: this.pageScrollInterruptible,
                pageScrollEasingLogic: this.pageScrollEasing,
                pageScrollDuration: this.pageScrollDuration,
                pageScrollSpeed: this.pageScrollSpeed,
                pageScrollFinishListener: this.pageScrollFinish,
            });
        }
        return this.pageScrollInstance;
    };
    /**
     * @private
     * @return {?}
     */
    PageScrollDirective.prototype.pushRouterState = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.pageScrollAdjustHash &&
            typeof this.pageScrollInstance.scrollTarget === 'string' &&
            this.pageScrollInstance.scrollTarget.substr(0, 1) === '#') {
            // "Navigate" to the current route again and this time set the fragment/hash
            this.router.navigate([], {
                fragment: (/** @type {?} */ (this.pageScrollInstance.scrollTarget.substr(1))),
                queryParamsHandling: 'preserve',
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    PageScrollDirective.prototype.scroll = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pageScrollInstance = this.generatePageScrollInstance();
        this.pushRouterState();
        this.pageScrollService.start(pageScrollInstance);
    };
    /**
     * @return {?}
     */
    PageScrollDirective.prototype.handleClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.routerLink && this.router !== null && this.router !== undefined) {
            /** @type {?} */
            var urlTree = void 0;
            if (typeof this.routerLink === 'string') {
                urlTree = this.router.parseUrl(this.routerLink);
            }
            else {
                urlTree = this.router.createUrlTree(this.routerLink);
            }
            if (!this.router.isActive(urlTree, true)) {
                // We need to navigate their first.
                // Navigation is handled by the routerLink directive
                // so we only need to listen for route change
                /** @type {?} */
                var subscription_1 = (/** @type {?} */ (this.router.events.subscribe((/**
                 * @param {?} routerEvent
                 * @return {?}
                 */
                function (routerEvent) {
                    if (routerEvent instanceof NavigationEnd) {
                        subscription_1.unsubscribe();
                        _this.scroll();
                    }
                    else if (routerEvent instanceof NavigationError ||
                        routerEvent instanceof NavigationCancel) {
                        subscription_1.unsubscribe();
                    }
                }))));
                return false; // to preventDefault()
            }
        }
        this.scroll();
        return false; // to preventDefault()
    };
    /** @nocollapse */
    PageScrollDirective.ctorParameters = function () { return [
        { type: PageScrollService },
        { type: Router, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    PageScrollDirective.propDecorators = {
        routerLink: [{ type: Input }],
        href: [{ type: Input }],
        pageScrollHorizontal: [{ type: Input }],
        pageScrollOffset: [{ type: Input }],
        pageScrollDuration: [{ type: Input }],
        pageScrollSpeed: [{ type: Input }],
        pageScrollEasing: [{ type: Input }],
        pageScrollInterruptible: [{ type: Input }],
        pageScrollAdjustHash: [{ type: Input }],
        pageScroll: [{ type: Input }],
        pageScrollFinish: [{ type: Output }],
        handleClick: [{ type: HostListener, args: ['click',] }]
    };
PageScrollDirective.ɵfac = function PageScrollDirective_Factory(t) { return new (t || PageScrollDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PageScrollService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Router, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
PageScrollDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PageScrollDirective, selectors: [["", "mdbPageScroll", ""]], hostBindings: function PageScrollDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function PageScrollDirective_click_HostBindingHandler() { return ctx.handleClick(); });
    } }, inputs: { pageScrollHorizontal: "pageScrollHorizontal", pageScrollOffset: "pageScrollOffset", pageScrollDuration: "pageScrollDuration", pageScrollSpeed: "pageScrollSpeed", pageScrollEasing: "pageScrollEasing", pageScrollAdjustHash: "pageScrollAdjustHash", pageScroll: "pageScroll", routerLink: "routerLink", href: "href", pageScrollInterruptible: "pageScrollInterruptible" }, outputs: { pageScrollFinish: "pageScrollFinish" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PageScrollDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbPageScroll]'
            }]
    }], function () { return [{ type: ɵngcc1.PageScrollService }, { type: ɵngcc2.Router, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { pageScrollHorizontal: [{
            type: Input
        }], pageScrollOffset: [{
            type: Input
        }], pageScrollDuration: [{
            type: Input
        }], pageScrollSpeed: [{
            type: Input
        }], pageScrollEasing: [{
            type: Input
        }], pageScrollAdjustHash: [{
            type: Input
        }], pageScroll: [{
            type: Input
        }], pageScrollFinish: [{
            type: Output
        }], handleClick: [{
            type: HostListener,
            args: ['click']
        }], routerLink: [{
            type: Input
        }], href: [{
            type: Input
        }], pageScrollInterruptible: [{
            type: Input
        }] }); })();
    return PageScrollDirective;
}());
export { PageScrollDirective };
if (false) {
    /** @type {?} */
    PageScrollDirective.prototype.routerLink;
    /** @type {?} */
    PageScrollDirective.prototype.href;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollHorizontal;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollOffset;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollDuration;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollSpeed;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollEasing;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollInterruptible;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollAdjustHash;
    /** @type {?} */
    PageScrollDirective.prototype.pageScroll;
    /** @type {?} */
    PageScrollDirective.prototype.pageScrollFinish;
    /**
     * @type {?}
     * @private
     */
    PageScrollDirective.prototype.pageScrollInstance;
    /**
     * @type {?}
     * @private
     */
    PageScrollDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    PageScrollDirective.prototype.pageScrollService;
    /**
     * @type {?}
     * @private
     */
    PageScrollDirective.prototype.router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,