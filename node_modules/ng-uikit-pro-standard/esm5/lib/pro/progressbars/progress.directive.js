/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ProgressDirective = /** @class */ (function () {
    function ProgressDirective() {
        this.addClass = true;
        this.bars = [];
        this._max = 100;
    }
    Object.defineProperty(ProgressDirective.prototype, "max", {
        /** maximum total value of progress element */
        get: /**
         * maximum total value of progress element
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._max = v;
            this.bars.forEach((/**
             * @param {?} bar
             * @return {?}
             */
            function (bar) {
                bar.recalculatePercentage();
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} bar
     * @return {?}
     */
    ProgressDirective.prototype.addBar = /**
     * @param {?} bar
     * @return {?}
     */
    function (bar) {
        if (!this.animate) {
            bar.transition = 'none';
        }
        this.bars.push(bar);
    };
    /**
     * @param {?} bar
     * @return {?}
     */
    ProgressDirective.prototype.removeBar = /**
     * @param {?} bar
     * @return {?}
     */
    function (bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    };
    ProgressDirective.propDecorators = {
        animate: [{ type: Input }],
        max: [{ type: HostBinding, args: ['attr.max',] }, { type: Input }],
        addClass: [{ type: HostBinding, args: ['class.progress',] }]
    };
ProgressDirective.ɵfac = function ProgressDirective_Factory(t) { return new (t || ProgressDirective)(); };
ProgressDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ProgressDirective, selectors: [["mdbProgress"], ["", "mdbProgress", ""]], hostVars: 3, hostBindings: function ProgressDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("max", ctx.max);
        ɵngcc0.ɵɵclassProp("progress", ctx.addClass);
    } }, inputs: { max: "max", animate: "animate" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressDirective, [{
        type: Directive,
        args: [{ selector: 'mdbProgress, [mdbProgress]' }]
    }], function () { return []; }, { addClass: [{
            type: HostBinding,
            args: ['class.progress']
        }], max: [{
            type: HostBinding,
            args: ['attr.max']
        }, {
            type: Input
        }], animate: [{
            type: Input
        }] }); })();
    return ProgressDirective;
}());
export { ProgressDirective };
if (false) {
    /**
     * if `true` changing value of progress bar will be animated (note: not supported by Bootstrap 4)
     * @type {?}
     */
    ProgressDirective.prototype.animate;
    /** @type {?} */
    ProgressDirective.prototype.addClass;
    /** @type {?} */
    ProgressDirective.prototype.bars;
    /**
     * @type {?}
     * @protected
     */
    ProgressDirective.prototype._max;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9wcm9ncmVzc2JhcnMvcHJvZ3Jlc3MuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTlEO0FBQXFELElBQXJEO0FBQStCLFFBbUJTLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFDeEQsUUFDUyxTQUFJLEdBQVUsRUFBRSxDQUFDO0FBQzFCLFFBQ1ksU0FBSSxHQUFHLEdBQUcsQ0FBQztBQUN2QixJQVdBLENBQUM7QUFDRCxJQTlCRSxzQkFFVyxrQ0FBRztBQUFJLFFBSGxCLDhDQUE4QztBQUNoRDtBQUFpQjtBQUdoQjtBQUNDO0FBRU8sUUFOUDtBQUFjLFlBR1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3JCLFFBQUUsQ0FBQztBQUVIO0FBQWlCO0FBQ047QUFDSTtBQUFZLFFBRnpCLFVBQWUsQ0FBUztBQUMxQixZQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFlBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0FBQU07QUFDakI7QUFDUjtBQUdHLFlBTGlCLFVBQUMsR0FBaUI7QUFBSSxnQkFDdEMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDbEMsWUFBSSxDQUFDLEVBQUMsQ0FBQztBQUNQLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQTJCLE9BVGxEO0FBQ0g7QUFDTztBQUFzQjtBQUNYO0FBQ1gsSUFXRSxrQ0FBTTtBQUFPO0FBQ3JCO0FBQW1CO0FBQ2pCLElBRkQsVUFBYyxHQUFpQjtBQUFJLFFBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLFlBQU0sR0FBRyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDOUIsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUFzQjtBQUMzQjtBQUFRLElBREYscUNBQVM7QUFBTztBQUN4QjtBQUFtQjtBQUFRLElBRDFCLFVBQWlCLEdBQWlCO0FBQUksUUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEQsSUFBRSxDQUFDLENBakNNO0FBQUM7WUFEVCxTQUFTLFNBQUMsRUFBRSxoQ0FFSywwQkFDZixLQUFLO0lBSGEsRUFBRSw0QkFBNEIsRUFBRSxwQ0FHeEMsc0JBR1YsV0FBVyxTQUFDLFVBQVUsY0FDdEIsS0FBSztBQUNOLDJCQVdDLFdBQVcsU0FBQyxnQkFBZ0I7QUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUFDLElBZ0I1Qyx3QkFBQztBQUNBLENBREEsQUFuQ0QsSUFtQ0M7QUFDRCxTQW5DYSxpQkFBaUI7QUFDN0I7QUFBYTtBQUFRO0FBQ0Y7QUFFcEI7QUFBUSxJQUZOLG9DQUFpQztBQUNuQztBQUNvQixJQWNsQixxQ0FBc0Q7QUFDeEQ7QUFDb0IsSUFBbEIsaUNBQXdCO0FBQzFCO0FBQ087QUFDUDtBQUNpQjtBQUFRLElBRnZCLGlDQUFxQjs7QUEzQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBN0JBLEFBRUEsQUFBQSxBQUhBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBZUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFsQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQWdCQSxBQUFBLEFBQUEsQUFuQ0EsQUFtQ0EsQUFsQ0EsQUFBQSxBQUVBLEFBQUEsQUFnQkEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9iYXIuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnbWRiUHJvZ3Jlc3MsIFttZGJQcm9ncmVzc10nIH0pXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NEaXJlY3RpdmUge1xuICAvKiogaWYgYHRydWVgIGNoYW5naW5nIHZhbHVlIG9mIHByb2dyZXNzIGJhciB3aWxsIGJlIGFuaW1hdGVkIChub3RlOiBub3Qgc3VwcG9ydGVkIGJ5IEJvb3RzdHJhcCA0KSAqL1xuICBASW5wdXQoKSBwdWJsaWMgYW5pbWF0ZTogYm9vbGVhbjtcblxuICAvKiogbWF4aW11bSB0b3RhbCB2YWx1ZSBvZiBwcm9ncmVzcyBlbGVtZW50ICovXG4gIEBIb3N0QmluZGluZygnYXR0ci5tYXgnKVxuICBASW5wdXQoKVxuICBwdWJsaWMgZ2V0IG1heCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tYXg7XG4gIH1cblxuICBwdWJsaWMgc2V0IG1heCh2OiBudW1iZXIpIHtcbiAgICB0aGlzLl9tYXggPSB2O1xuICAgIHRoaXMuYmFycy5mb3JFYWNoKChiYXI6IEJhckNvbXBvbmVudCkgPT4ge1xuICAgICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5wcm9ncmVzcycpIHB1YmxpYyBhZGRDbGFzcyA9IHRydWU7XG5cbiAgcHVibGljIGJhcnM6IGFueVtdID0gW107XG5cbiAgcHJvdGVjdGVkIF9tYXggPSAxMDA7XG5cbiAgcHVibGljIGFkZEJhcihiYXI6IEJhckNvbXBvbmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5hbmltYXRlKSB7XG4gICAgICBiYXIudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICB9XG4gICAgdGhpcy5iYXJzLnB1c2goYmFyKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVCYXIoYmFyOiBCYXJDb21wb25lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmJhcnMuc3BsaWNlKHRoaXMuYmFycy5pbmRleE9mKGJhciksIDEpO1xuICB9XG59XG4iXX0=