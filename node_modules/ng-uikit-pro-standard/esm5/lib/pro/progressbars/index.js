/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './progress-bars-module/index';
import * as ɵngcc2 from './progress-spinner-module/index';
import * as ɵngcc3 from './progressbar.module';
export { BarComponent } from './bar.component';
export { ProgressDirective } from './progress.directive';
export { ProgressbarComponent } from './progressbar.component';
export { ProgressbarModule } from './progressbar.module';
export { ProgressbarConfigComponent } from './progressbar.config.component';
export { ProgressSpinnerComponent } from './progress-spinner.component';
import { ProgressbarModule } from './progressbar.module';
import { MdProgressSpinnerModule } from './progress-spinner-module/index';
import { MdProgressBarModule } from './progress-bars-module/index';
/** @type {?} */
var MATERIAL_MODULES = [MdProgressBarModule, MdProgressSpinnerModule, ProgressbarModule];
var PreloadersModule = /** @class */ (function () {
    function PreloadersModule() {
    }
PreloadersModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PreloadersModule });
PreloadersModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PreloadersModule_Factory(t) { return new (t || PreloadersModule)(); }, imports: [[
            MdProgressBarModule.forRoot(),
            MdProgressSpinnerModule.forRoot(),
            ProgressbarModule.forRoot(),
        ], MdProgressBarModule, MdProgressSpinnerModule, ProgressbarModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PreloadersModule, { imports: [ɵngcc1.MdProgressBarModule, ɵngcc2.MdProgressSpinnerModule, ɵngcc3.ProgressbarModule], exports: [MdProgressBarModule, MdProgressSpinnerModule, ProgressbarModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PreloadersModule, [{
        type: NgModule,
        args: [{
                imports: [
                    MdProgressBarModule.forRoot(),
                    MdProgressSpinnerModule.forRoot(),
                    ProgressbarModule.forRoot(),
                ],
                exports: MATERIAL_MODULES
            }]
    }], function () { return []; }, null); })();
    return PreloadersModule;
}());
export { PreloadersModule };
var ProgressBars = /** @class */ (function () {
    function ProgressBars() {
    }
    /**
     * @return {?}
     */
    ProgressBars.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: PreloadersModule };
    };
ProgressBars.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProgressBars });
ProgressBars.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProgressBars_Factory(t) { return new (t || ProgressBars)(); }, imports: [MATERIAL_MODULES, MdProgressBarModule, MdProgressSpinnerModule, ProgressbarModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressBars, { imports: [MdProgressBarModule, MdProgressSpinnerModule, ProgressbarModule], exports: [MdProgressBarModule, MdProgressSpinnerModule, ProgressbarModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressBars, [{
        type: NgModule,
        args: [{
                imports: MATERIAL_MODULES,
                exports: MATERIAL_MODULES
            }]
    }], function () { return []; }, null); })();
    return ProgressBars;
}());
export { ProgressBars };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3Byb2dyZXNzYmFycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7Ozs7O0FBRTlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNuRTtBQUNnQixJQUFWLGdCQUFnQixHQUFHLENBQUMsbUJBQW1CLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLENBQUM7QUFFMUY7QUFFMkIsSUFGM0I7QUFFSyxJQU0wQixDQUFDO29EQVIvQixRQUFRLFNBQUM7Y0FDUixPQUFPLEVBQUUsMEJBQ1AsbUJBQW1CLENBQUMsT0FBTyxFQUFFLDBCQUM3Qix1QkFBdUIsQ0FBQyxPQUFPLEVBQUU7WUFDakMsaUJBQWlCLENBQUMsT0FBTyxFQUFFO21CQUM1QixzQkFDRDtDQUFPLEVBQUUsZ0JBQWdCLG1CQUMxQjs7Ozs7Ozs7Ozs7OztnREFDUTtBQUFDLElBQXFCLHVCQUFDO0FBRWhDLENBRmdDLEFBUmhDLElBUWdDO0FBQ2hDLFNBRGEsZ0JBQWdCO0FBRTdCO0FBRU8sSUFGUDtBQUNjLElBT2QsQ0FBQztBQUNEO0FBQVE7QUFBbUI7QUFBUSxJQUoxQixvQkFBTztBQUFPO0FBQ3ZCO0FBQVEsSUFETjtBQUFjLFFBQ1osT0FBTyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDO0FBQzFDLElBQUUsQ0FBQztnREFQRixRQUFRLFNBQUM7a0JBQ1IsT0FBTyxFQUFFLGdCQUFnQixzQkFDekIsT0FBTyxFQUFFLGdCQUFnQixtQkFDMUI7Ozs7Ozs7O2dEQUNRO0FBQUMsSUFJVixtQkFBQztBQUNBLENBREEsQUFSRCxJQVFDOztBQWpDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBUUEsQUFBQSxBQVJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQVJBLEFBUUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQVFBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQVJBLEFBUUEsQUFKQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IHsgQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9iYXIuY29tcG9uZW50JztcbmV4cG9ydCB7IFByb2dyZXNzRGlyZWN0aXZlIH0gZnJvbSAnLi9wcm9ncmVzcy5kaXJlY3RpdmUnO1xuZXhwb3J0IHsgUHJvZ3Jlc3NiYXJDb21wb25lbnQgfSBmcm9tICcuL3Byb2dyZXNzYmFyLmNvbXBvbmVudCc7XG5leHBvcnQgeyBQcm9ncmVzc2Jhck1vZHVsZSB9IGZyb20gJy4vcHJvZ3Jlc3NiYXIubW9kdWxlJztcbmV4cG9ydCB7IFByb2dyZXNzYmFyQ29uZmlnQ29tcG9uZW50IH0gZnJvbSAnLi9wcm9ncmVzc2Jhci5jb25maWcuY29tcG9uZW50JztcbmV4cG9ydCB7IFByb2dyZXNzU3Bpbm5lckNvbXBvbmVudCB9IGZyb20gJy4vcHJvZ3Jlc3Mtc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUHJvZ3Jlc3NiYXJNb2R1bGUgfSBmcm9tICcuL3Byb2dyZXNzYmFyLm1vZHVsZSc7XG5cbmltcG9ydCB7IE1kUHJvZ3Jlc3NTcGlubmVyTW9kdWxlIH0gZnJvbSAnLi9wcm9ncmVzcy1zcGlubmVyLW1vZHVsZS9pbmRleCc7XG5pbXBvcnQgeyBNZFByb2dyZXNzQmFyTW9kdWxlIH0gZnJvbSAnLi9wcm9ncmVzcy1iYXJzLW1vZHVsZS9pbmRleCc7XG5cbmNvbnN0IE1BVEVSSUFMX01PRFVMRVMgPSBbTWRQcm9ncmVzc0Jhck1vZHVsZSwgTWRQcm9ncmVzc1NwaW5uZXJNb2R1bGUsIFByb2dyZXNzYmFyTW9kdWxlXTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIE1kUHJvZ3Jlc3NCYXJNb2R1bGUuZm9yUm9vdCgpLFxuICAgIE1kUHJvZ3Jlc3NTcGlubmVyTW9kdWxlLmZvclJvb3QoKSxcbiAgICBQcm9ncmVzc2Jhck1vZHVsZS5mb3JSb290KCksXG4gIF0sXG4gIGV4cG9ydHM6IE1BVEVSSUFMX01PRFVMRVMsXG59KVxuZXhwb3J0IGNsYXNzIFByZWxvYWRlcnNNb2R1bGUge31cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogTUFURVJJQUxfTU9EVUxFUyxcbiAgZXhwb3J0czogTUFURVJJQUxfTU9EVUxFUyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NCYXJzIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHsgbmdNb2R1bGU6IFByZWxvYWRlcnNNb2R1bGUgfTtcbiAgfVxufVxuIl19