/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Inject, Input, PLATFORM_ID, ViewEncapsulation, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './progress-spinner-module/progress-spinner.component';
var ProgressSpinnerComponent = /** @class */ (function () {
    function ProgressSpinnerComponent(el, platformId) {
        this.el = el;
        this.addClass = 'spinner-blue-only';
        this.isBrowser = false;
        this.spinnerType = '';
        this.spinnerColor = 'rainbow';
        this.isBrowser = isPlatformBrowser(platformId);
    }
    /**
     * @return {?}
     */
    ProgressSpinnerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hostElem = this.el.nativeElement;
        /** @type {?} */
        var colorClass = this.spinnerColor;
        this.addClass = 'spinner-rainbow';
        switch (colorClass) {
            case 'green':
                this.addClass = 'spinner-green-only';
                break;
            case 'blue':
                this.addClass = 'spinner-blue-only';
                break;
            case 'yellow':
                this.addClass = 'spinner-yellow-only';
                break;
            case 'red':
                this.addClass = 'spinner-red-only';
                break;
            case 'rainbow':
                this.addClass = 'spinner-rainbow spinner-blue-only mat-progress-spinner';
                this.spinerRun();
                break;
        }
        hostElem.children[0].children[0].className += ' ' + this.addClass;
    };
    /**
     * @return {?}
     */
    ProgressSpinnerComponent.prototype.spinerRun = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var counter = 0;
        /** @type {?} */
        var hostElem = this.el.nativeElement;
        if (this.isBrowser) {
            setInterval((/**
             * @return {?}
             */
            function () {
                switch (counter) {
                    case 0:
                        _this.addClass = 'spinner-red-only mat-progress-spinner ';
                        break;
                    case 1:
                        _this.addClass = 'spinner-yellow-only mat-progress-spinner';
                        break;
                    case 2:
                        _this.addClass = 'spinner-blue-only mat-progress-spinner';
                        break;
                    case 3:
                        _this.addClass = 'spinner-green-only mat-progress-spinner';
                        break;
                }
                hostElem.children[0].children[0].className = ' ' + _this.addClass;
                if (counter < 3) {
                    counter++;
                }
                else {
                    counter = 0;
                }
            }), 1333);
        }
    };
    /** @nocollapse */
    ProgressSpinnerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    ProgressSpinnerComponent.propDecorators = {
        spinnerType: [{ type: Input }],
        spinnerColor: [{ type: Input }]
    };
ProgressSpinnerComponent.ɵfac = function ProgressSpinnerComponent_Factory(t) { return new (t || ProgressSpinnerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
ProgressSpinnerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressSpinnerComponent, selectors: [["mdb-spinner"]], inputs: { spinnerType: "spinnerType", spinnerColor: "spinnerColor" }, decls: 2, vars: 3, consts: [["mdbSpinners", "", "mode", "indeterminate"]], template: function ProgressSpinnerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelement(1, "mdb-Spinners", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("preloader-wrapper active  ", ctx.spinnerType, "");
    } }, directives: [ɵngcc1.MdProgressSpinnerComponent, ɵngcc1.MdProgressSpinnerCssMatStylerDirective], styles: [""], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressSpinnerComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-spinner',
                template: "<div class=\"preloader-wrapper active  {{spinnerType}}\">\n    <mdb-Spinners mdbSpinners mode=\"indeterminate\"></mdb-Spinners>\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: String, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { spinnerType: [{
            type: Input
        }], spinnerColor: [{
            type: Input
        }] }); })();
    return ProgressSpinnerComponent;
}());
export { ProgressSpinnerComponent };
if (false) {
    /** @type {?} */
    ProgressSpinnerComponent.prototype.addClass;
    /** @type {?} */
    ProgressSpinnerComponent.prototype.isBrowser;
    /** @type {?} */
    ProgressSpinnerComponent.prototype.spinnerType;
    /** @type {?} */
    ProgressSpinnerComponent.prototype.spinnerColor;
    /** @type {?} */
    ProgressSpinnerComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3Mtc3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3Byb2dyZXNzYmFycy9wcm9ncmVzcy1zcGlubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssRUFDTCxXQUFXLEVBQ1gsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFFcEQ7QUFFb0IsSUFVbEIsa0NBQW1CLEVBQWMsRUFBdUIsVUFBa0I7QUFDNUUsUUFEcUIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBTGxDLGFBQVEsR0FBVyxtQkFBbUIsQ0FBQztBQUN6QyxRQUFFLGNBQVMsR0FBRyxLQUFLLENBQUM7QUFDcEIsUUFBVyxnQkFBVyxHQUFHLEVBQUUsQ0FBQztBQUM1QixRQUFXLGlCQUFZLEdBQUcsU0FBUyxDQUFDO0FBQ3BDLFFBRUksSUFBSSxDQUFDLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuRCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQ0g7QUFBUSxJQURWLGtEQUFlO0FBQ2Y7QUFBbUI7QUFBUSxJQUQzQjtBQUFjO0FBQ0csWUFBVCxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhO0FBQzFDO0FBQXlCLFlBQWYsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZO0FBQ3hDLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQztBQUN0QyxRQUNJLFFBQVEsVUFBVSxFQUFFO0FBQ3hCLFlBQU0sS0FBSyxPQUFPO0FBQ2xCLGdCQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsb0JBQW9CLENBQUM7QUFDN0MsZ0JBQVEsTUFBTTtBQUNkLFlBQU0sS0FBSyxNQUFNO0FB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QUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQVlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUE0QkEsQUEzQkEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQXRFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQWJBLEFBQUEsQUFvQkEsQUFBQSxBQUFBLEFBQUEsQUFIQSxBQUFBLEFBQ0EsQUFBQSxBQTZEQSxBQUFBLEFBQUEsQUF2RUEsQUF1RUEsQUFqRUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBQTEFURk9STV9JRCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtZGItc3Bpbm5lcicsXG4gIHRlbXBsYXRlVXJsOiAncHJvZ3Jlc3Mtc3Bpbm5lci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Byb2dyZXNzYmFycy1tb2R1bGUuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc1NwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgYWRkQ2xhc3M6IFN0cmluZyA9ICdzcGlubmVyLWJsdWUtb25seSc7XG4gIGlzQnJvd3NlciA9IGZhbHNlO1xuICBASW5wdXQoKSBzcGlubmVyVHlwZSA9ICcnO1xuICBASW5wdXQoKSBzcGlubmVyQ29sb3IgPSAncmFpbmJvdyc7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlzQnJvd3NlciA9IGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IGhvc3RFbGVtID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IGNvbG9yQ2xhc3MgPSB0aGlzLnNwaW5uZXJDb2xvcjtcbiAgICB0aGlzLmFkZENsYXNzID0gJ3NwaW5uZXItcmFpbmJvdyc7XG5cbiAgICBzd2l0Y2ggKGNvbG9yQ2xhc3MpIHtcbiAgICAgIGNhc2UgJ2dyZWVuJzpcbiAgICAgICAgdGhpcy5hZGRDbGFzcyA9ICdzcGlubmVyLWdyZWVuLW9ubHknO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2JsdWUnOlxuICAgICAgICB0aGlzLmFkZENsYXNzID0gJ3NwaW5uZXItYmx1ZS1vbmx5JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd5ZWxsb3cnOlxuICAgICAgICB0aGlzLmFkZENsYXNzID0gJ3NwaW5uZXIteWVsbG93LW9ubHknO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlZCc6XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MgPSAnc3Bpbm5lci1yZWQtb25seSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmFpbmJvdyc6XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MgPSAnc3Bpbm5lci1yYWluYm93IHNwaW5uZXItYmx1ZS1vbmx5IG1hdC1wcm9ncmVzcy1zcGlubmVyJztcbiAgICAgICAgdGhpcy5zcGluZXJSdW4oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGhvc3RFbGVtLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNsYXNzTmFtZSArPSAnICcgKyB0aGlzLmFkZENsYXNzO1xuICB9XG5cbiAgc3BpbmVyUnVuKCkge1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBjb25zdCBob3N0RWxlbSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIpIHtcbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgc3dpdGNoIChjb3VudGVyKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgdGhpcy5hZGRDbGFzcyA9ICdzcGlubmVyLXJlZC1vbmx5IG1hdC1wcm9ncmVzcy1zcGlubmVyICc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB0aGlzLmFkZENsYXNzID0gJ3NwaW5uZXIteWVsbG93LW9ubHkgbWF0LXByb2dyZXNzLXNwaW5uZXInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgdGhpcy5hZGRDbGFzcyA9ICdzcGlubmVyLWJsdWUtb25seSBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB0aGlzLmFkZENsYXNzID0gJ3NwaW5uZXItZ3JlZW4tb25seSBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGhvc3RFbGVtLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNsYXNzTmFtZSA9ICcgJyArIHRoaXMuYWRkQ2xhc3M7XG4gICAgICAgIGlmIChjb3VudGVyIDwgMykge1xuICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudGVyID0gMDtcbiAgICAgICAgfVxuICAgICAgfSwgMTMzMyk7XG4gICAgfVxuICB9XG59XG4iXX0=