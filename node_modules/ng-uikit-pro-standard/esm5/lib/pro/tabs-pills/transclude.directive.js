/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var NgTranscludeDirective = /** @class */ (function () {
    function NgTranscludeDirective(viewRef) {
        this.viewRef = viewRef;
    }
    Object.defineProperty(NgTranscludeDirective.prototype, "mdbNgTransclude", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ngTransclude;
        },
        set: /**
         * @param {?} templateRef
         * @return {?}
         */
        function (templateRef) {
            this._ngTransclude = templateRef;
            if (templateRef) {
                this.viewRef.createEmbeddedView(templateRef);
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    NgTranscludeDirective.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    NgTranscludeDirective.propDecorators = {
        mdbNgTransclude: [{ type: Input }]
    };
NgTranscludeDirective.ɵfac = function NgTranscludeDirective_Factory(t) { return new (t || NgTranscludeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
NgTranscludeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgTranscludeDirective, selectors: [["", "mdbNgTransclude", ""]], inputs: { mdbNgTransclude: "mdbNgTransclude" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTranscludeDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbNgTransclude]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { mdbNgTransclude: [{
            type: Input
        }] }); })();
    return NgTranscludeDirective;
}());
export { NgTranscludeDirective };
if (false) {
    /** @type {?} */
    NgTranscludeDirective.prototype.viewRef;
    /**
     * @type {?}
     * @protected
     */
    NgTranscludeDirective.prototype._viewRef;
    /**
     * @type {?}
     * @protected
     */
    NgTranscludeDirective.prototype._ngTransclude;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNjbHVkZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3RhYnMtcGlsbHMvdHJhbnNjbHVkZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFaEY7QUFHUyxJQWtCUCwrQkFBbUIsT0FBeUI7QUFDOUMsUUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUMzQixJQUFFLENBQUM7QUFDSCxJQWZFLHNCQUNXLGtEQUFlO0FBQUk7QUFBaUI7QUFDdkM7QUFBWSxRQU1wQjtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQzlCLFFBQUUsQ0FBQztBQUVIO0FBQWlCO0FBQ2hCO0FBQXVCO0FBR3RCLFFBaEJBLFVBQzJCLFdBQTZCO0FBQzFELFlBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUM7QUFDckMsWUFBSSxJQUFJLFdBQVcsRUFBRTtBQUNyQixnQkFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ25ELGFBQUs7QUFDTCxRQUFFLENBQUM7QUFFSDtBQUEwQjtBQUN4QixPQUhDLEFBWk07QUFBQztrQ0FIVCxTQUFTLFNBQUMscERBR3NCO1FBRi9CLFFBQVEsRUFBRSxsQkFLYSxnQkFSZSxnQkFBZ0I7RUFHekIsRkFINEI7VUFJMUQsVkFKb0U7QUFHbEQsa0NBUWhCLEtBQUs7QUFDUDs7Ozs7Ozs7OztvQkFBTTtBQUFDLElBY1IsNEJBQUM7QUFDQSxDQURBLEFBeEJELElBd0JDO0FBQ0QsU0F0QmEscUJBQXFCO0FBQ2pDO0FBQWE7QUFBcUIsSUFBakMsd0NBQWlDO0FBQ25DO0FBQ087QUFBaUI7QUFDdEI7QUFBUSxJQURSLHlDQUFxQztBQUN2QztBQUFRO0FBQWlCO0FBQWtCO0FBRXRDLElBRkgsOENBQTBDOztBQVRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQXFCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFkQSxBQUNBLEFBQUEsQUFPQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFWQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQWZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFKQSxBQUFBLEFBV0EsQUFBQSxBQWVBLEFBQUEsQUFBQSxBQXhCQSxBQXdCQSxBQXJCQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYk5nVHJhbnNjbHVkZV0nXG59KVxuZXhwb3J0IGNsYXNzIE5nVHJhbnNjbHVkZURpcmVjdGl2ZSB7XG4gIHB1YmxpYyB2aWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gIHByb3RlY3RlZCBfdmlld1JlZjogVmlld0NvbnRhaW5lclJlZjtcbiAgcHJvdGVjdGVkIF9uZ1RyYW5zY2x1ZGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBtZGJOZ1RyYW5zY2x1ZGUodGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICB0aGlzLl9uZ1RyYW5zY2x1ZGUgPSB0ZW1wbGF0ZVJlZjtcbiAgICBpZiAodGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMudmlld1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGVtcGxhdGVSZWYpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWRiTmdUcmFuc2NsdWRlKCk6IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9uZ1RyYW5zY2x1ZGU7XG4gIH1cblxuICBwdWJsaWMgY29uc3RydWN0b3Iodmlld1JlZjogVmlld0NvbnRhaW5lclJlZikge1xuICAgIHRoaXMudmlld1JlZiA9IHZpZXdSZWY7XG4gIH1cbn1cbiJdfQ==