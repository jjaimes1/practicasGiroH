/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MdbTreeComponent } from './tree-view.component';
import { CheckboxModule } from '../../free/checkbox/checkbox.module';
import * as ɵngcc0 from '@angular/core';
var MdbTreeModule = /** @class */ (function () {
    function MdbTreeModule() {
    }
MdbTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MdbTreeModule });
MdbTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MdbTreeModule_Factory(t) { return new (t || MdbTreeModule)(); }, imports: [[CommonModule, CheckboxModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbTreeModule, { declarations: function () { return [MdbTreeComponent]; }, imports: function () { return [CommonModule, CheckboxModule]; }, exports: function () { return [MdbTreeComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTreeModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, CheckboxModule],
                declarations: [MdbTreeComponent],
                exports: [MdbTreeComponent]
            }]
    }], function () { return []; }, null); })();
    return MdbTreeModule;
}());
export { MdbTreeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmctdWlraXQtcHJvLXN0YW5kYXJkL2xpYi9wcm8vdHJlZS12aWV3L3RyZWUtdmlldy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXpELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7QUFFckU7QUFDcUMsSUFEckM7QUFDZSxJQUlhLENBQUM7aURBTDVCLFFBQVEsU0FBQztpQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLHNCQUN2QyxZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7RUFDNUI7Ozs7Ozs7O2dEQUNRO0FBQUMsSUFBa0Isb0JBQUM7QUFDNUIsQ0FENEIsQUFMN0IsSUFLNkI7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFLQSxBQUFBLEFBTEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBTEEsQUFLQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBNZGJUcmVlQ29tcG9uZW50IH0gZnJvbSAnLi90cmVlLXZpZXcuY29tcG9uZW50JztcblxuaW1wb3J0IHsgQ2hlY2tib3hNb2R1bGUgfSBmcm9tICcuLi8uLi9mcmVlL2NoZWNrYm94L2NoZWNrYm94Lm1vZHVsZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIENoZWNrYm94TW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbTWRiVHJlZUNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtNZGJUcmVlQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgTWRiVHJlZU1vZHVsZSB7fVxuIl19