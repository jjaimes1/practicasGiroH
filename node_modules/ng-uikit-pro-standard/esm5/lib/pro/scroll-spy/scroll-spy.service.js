/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function ScrollSpy() { }
if (false) {
    /** @type {?} */
    ScrollSpy.prototype.id;
    /** @type {?} */
    ScrollSpy.prototype.links;
}
var ScrollSpyService = /** @class */ (function () {
    function ScrollSpyService() {
        this.scrollSpys = [];
        this.activeSubject = new Subject();
        this.active$ = this.activeSubject;
    }
    /**
     * @param {?} scrollSpy
     * @return {?}
     */
    ScrollSpyService.prototype.addScrollSpy = /**
     * @param {?} scrollSpy
     * @return {?}
     */
    function (scrollSpy) {
        this.scrollSpys.push(scrollSpy);
    };
    /**
     * @param {?} scrollSpyId
     * @return {?}
     */
    ScrollSpyService.prototype.removeScrollSpy = /**
     * @param {?} scrollSpyId
     * @return {?}
     */
    function (scrollSpyId) {
        /** @type {?} */
        var scrollSpyIndex = this.scrollSpys.findIndex((/**
         * @param {?} spy
         * @return {?}
         */
        function (spy) {
            return spy.id === scrollSpyId;
        }));
        this.scrollSpys.splice(scrollSpyIndex, 1);
    };
    /**
     * @param {?} scrollSpyId
     * @param {?} activeLinkId
     * @return {?}
     */
    ScrollSpyService.prototype.updateActiveState = /**
     * @param {?} scrollSpyId
     * @param {?} activeLinkId
     * @return {?}
     */
    function (scrollSpyId, activeLinkId) {
        /** @type {?} */
        var scrollSpy = this.scrollSpys.find((/**
         * @param {?} spy
         * @return {?}
         */
        function (spy) {
            return spy.id === scrollSpyId;
        }));
        if (!scrollSpy) {
            return;
        }
        /** @type {?} */
        var activeLink = scrollSpy.links.find((/**
         * @param {?} link
         * @return {?}
         */
        function (link) {
            return link.id === activeLinkId;
        }));
        this.setActiveLink(activeLink);
    };
    /**
     * @param {?} scrollSpyId
     * @param {?} activeLinkId
     * @return {?}
     */
    ScrollSpyService.prototype.removeActiveState = /**
     * @param {?} scrollSpyId
     * @param {?} activeLinkId
     * @return {?}
     */
    function (scrollSpyId, activeLinkId) {
        /** @type {?} */
        var scrollSpy = this.scrollSpys.find((/**
         * @param {?} spy
         * @return {?}
         */
        function (spy) {
            return spy.id === scrollSpyId;
        }));
        if (!scrollSpy) {
            return;
        }
        /** @type {?} */
        var activeLink = scrollSpy.links.find((/**
         * @param {?} link
         * @return {?}
         */
        function (link) {
            return link.id === activeLinkId;
        }));
        if (!activeLink) {
            return;
        }
        activeLink.active = false;
        activeLink.detectChanges();
    };
    /**
     * @param {?} activeLink
     * @return {?}
     */
    ScrollSpyService.prototype.setActiveLink = /**
     * @param {?} activeLink
     * @return {?}
     */
    function (activeLink) {
        if (activeLink) {
            activeLink.active = true;
            activeLink.detectChanges();
            this.activeSubject.next(activeLink);
        }
    };
    /**
     * @param {?} scrollSpyId
     * @return {?}
     */
    ScrollSpyService.prototype.removeActiveLinks = /**
     * @param {?} scrollSpyId
     * @return {?}
     */
    function (scrollSpyId) {
        /** @type {?} */
        var scrollSpy = this.scrollSpys.find((/**
         * @param {?} spy
         * @return {?}
         */
        function (spy) {
            return spy.id === scrollSpyId;
        }));
        if (!scrollSpy) {
            return;
        }
        scrollSpy.links.forEach((/**
         * @param {?} link
         * @return {?}
         */
        function (link) {
            link.active = false;
            link.detectChanges();
        }));
    };
ScrollSpyService.ɵfac = function ScrollSpyService_Factory(t) { return new (t || ScrollSpyService)(); };
ScrollSpyService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollSpyService, factory: function (t) { return ScrollSpyService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return ScrollSpyService;
}());
export { ScrollSpyService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScrollSpyService.prototype.scrollSpys;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyService.prototype.activeSubject;
    /** @type {?} */
    ScrollSpyService.prototype.active$;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,