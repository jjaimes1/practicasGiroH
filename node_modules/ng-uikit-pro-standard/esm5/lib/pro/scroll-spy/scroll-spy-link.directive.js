/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, HostListener, HostBinding, ChangeDetectorRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var ScrollSpyLinkDirective = /** @class */ (function () {
    function ScrollSpyLinkDirective(cdRef, document) {
        this.cdRef = cdRef;
        this.document = document;
        this._scrollIntoView = true;
        this.active = false;
    }
    Object.defineProperty(ScrollSpyLinkDirective.prototype, "scrollIntoView", {
        get: /**
         * @return {?}
         */
        function () { return this._scrollIntoView; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._scrollIntoView = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollSpyLinkDirective.prototype, "section", {
        get: /**
         * @return {?}
         */
        function () { return this._section; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._section = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollSpyLinkDirective.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        set: /**
         * @param {?} newId
         * @return {?}
         */
        function (newId) {
            if (newId) {
                this._id = newId;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ScrollSpyLinkDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.section && this.scrollIntoView === true) {
            this.section.scrollIntoView();
        }
    };
    /**
     * @return {?}
     */
    ScrollSpyLinkDirective.prototype.detectChanges = /**
     * @return {?}
     */
    function () {
        this.cdRef.detectChanges();
    };
    /**
     * @return {?}
     */
    ScrollSpyLinkDirective.prototype.assignSectionToId = /**
     * @return {?}
     */
    function () {
        this.section = this.document.documentElement.querySelector("#" + this.id);
    };
    /**
     * @return {?}
     */
    ScrollSpyLinkDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.assignSectionToId();
    };
    /** @nocollapse */
    ScrollSpyLinkDirective.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    ScrollSpyLinkDirective.propDecorators = {
        scrollIntoView: [{ type: Input }],
        id: [{ type: Input, args: ['mdbScrollSpyLink',] }],
        active: [{ type: HostBinding, args: ['class.active',] }],
        onClick: [{ type: HostListener, args: ['click', [],] }]
    };
ScrollSpyLinkDirective.ɵfac = function ScrollSpyLinkDirective_Factory(t) { return new (t || ScrollSpyLinkDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ScrollSpyLinkDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyLinkDirective, selectors: [["", "mdbScrollSpyLink", ""]], hostVars: 2, hostBindings: function ScrollSpyLinkDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ScrollSpyLinkDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, inputs: { scrollIntoView: "scrollIntoView", id: ["mdbScrollSpyLink", "id"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyLinkDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbScrollSpyLink]'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], scrollIntoView: [{
            type: Input
        }], id: [{
            type: Input,
            args: ['mdbScrollSpyLink']
        }], onClick: [{
            type: HostListener,
            args: ['click', []]
        }] }); })();
    return ScrollSpyLinkDirective;
}());
export { ScrollSpyLinkDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScrollSpyLinkDirective.prototype._scrollIntoView;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyLinkDirective.prototype._section;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyLinkDirective.prototype._id;
    /** @type {?} */
    ScrollSpyLinkDirective.prototype.active;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyLinkDirective.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyLinkDirective.prototype.document;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS1saW5rLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmctdWlraXQtcHJvLXN0YW5kYXJkL2xpYi9wcm8vc2Nyb2xsLXNweS9zY3JvbGwtc3B5LWxpbmsuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxZQUFZLEVBQ1osV0FBVyxFQUNYLGlCQUFpQixFQUNqQixNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUUzQztBQUdTLElBaUJQLGdDQUNVLEtBQXdCLEVBQ04sUUFBYTtBQUN4QyxRQUZTLFVBQUssR0FBTCxLQUFLLENBQW1CO0FBQUMsUUFDUCxhQUFRLEdBQVIsUUFBUSxDQUFLO0FBQzNDLFFBZFUsb0JBQWUsR0FBRyxJQUFJLENBQUM7QUFDakMsUUEwQkUsV0FBTSxHQUFHLEtBQUssQ0FBQztBQUNqQixJQWRLLENBQUM7QUFDTixJQXBCRSxzQkFDSSxrREFBYztBQUFJO0FBQWlCO0FBQ2pDO0FBQVksUUFGbEIsY0FDdUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUN0RDtBQUFpQjtBQUNYO0FBQXVCO0FBRTFCLFFBSEYsVUFBbUIsS0FBYztBQUNuQyxZQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLFFBQUUsQ0FBQztBQUNGO0FBQTBCO0FBRVIsT0FOb0M7QUFDdkQsSUFLRSxzQkFBSSwyQ0FBTztBQUFJO0FBQWlCO0FBQ25CO0FBQVksUUFEekIsY0FBZ0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN4QztBQUFpQjtBQUNSO0FBQ007QUFBWSxRQUYxQixVQUFZLEtBQWtCO0FBQ2hDLFlBQUksSUFBSSxLQUFLLEVBQUU7QUFDZixnQkFBTSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztB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QUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFIQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFMQSxBQWNBLEFBQ0EsQUFBQSxBQURBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFMQSxBQVdBLEFBQUEsQUFEQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF2REEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVBBLEFBQUEsQUEyQkEsQUFBQSxBQUFBLEFBQUEsQUFsQkEsQUFBQSxBQXFCQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBa0JBLEFBQUEsQUFBQSxBQXhEQSxBQXdEQSxBQXJEQSxBQUFBLEFBTUEsQUFBQSxBQVFBLEFBQUEsQUFDQSxBQUFBLEFBaUJBLEFBQ0EsQUFmQSxBQUFBLEFBQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgSG9zdExpc3RlbmVyLFxuICBIb3N0QmluZGluZyxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIEluamVjdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYlNjcm9sbFNweUxpbmtdJ1xufSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxTcHlMaW5rRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgZ2V0IHNjcm9sbEludG9WaWV3KCkgeyByZXR1cm4gdGhpcy5fc2Nyb2xsSW50b1ZpZXc7IH1cbiAgc2V0IHNjcm9sbEludG9WaWV3KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2Nyb2xsSW50b1ZpZXcgPSB2YWx1ZTtcbiAgfVxuICBwcml2YXRlIF9zY3JvbGxJbnRvVmlldyA9IHRydWU7XG5cbiAgZ2V0IHNlY3Rpb24oKSB7IHJldHVybiB0aGlzLl9zZWN0aW9uOyB9XG4gIHNldCBzZWN0aW9uKHZhbHVlOiBIVE1MRWxlbWVudCkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5fc2VjdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIF9zZWN0aW9uOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBfaWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnlcbiAgKSB7fVxuXG4gIEBJbnB1dCgnbWRiU2Nyb2xsU3B5TGluaycpXG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuICBzZXQgaWQobmV3SWQ6IHN0cmluZykge1xuICAgIGlmIChuZXdJZCkge1xuICAgICAgdGhpcy5faWQgPSBuZXdJZDtcbiAgICB9XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpXG4gIGFjdGl2ZSA9IGZhbHNlO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgW10pXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMuc2VjdGlvbiAmJiB0aGlzLnNjcm9sbEludG9WaWV3ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnNlY3Rpb24uc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICB9XG4gIH1cblxuICBkZXRlY3RDaGFuZ2VzKCkge1xuICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgYXNzaWduU2VjdGlvblRvSWQoKSB7XG4gICAgdGhpcy5zZWN0aW9uID0gdGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5pZH1gKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYXNzaWduU2VjdGlvblRvSWQoKTtcbiAgfVxufVxuIl19