/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, Renderer2, NgZone, Input } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ScrollSpyService } from './scroll-spy.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './scroll-spy.service';
var ScrollSpyWindowDirective = /** @class */ (function () {
    function ScrollSpyWindowDirective(document, el, renderer, ngZone, scrollSpyService) {
        this.document = document;
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.scrollSpyService = scrollSpyService;
        this.offset = 0;
    }
    Object.defineProperty(ScrollSpyWindowDirective.prototype, "scrollSpyId", {
        get: /**
         * @return {?}
         */
        function () { return this._scrollSpyId; },
        set: /**
         * @param {?} newId
         * @return {?}
         */
        function (newId) {
            if (newId) {
                this._scrollSpyId = newId;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ScrollSpyWindowDirective.prototype.isElementInViewport = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;
        /** @type {?} */
        var elHeight = this.el.nativeElement.offsetHeight;
        /** @type {?} */
        var elTop = this.el.nativeElement.offsetTop - this.offset;
        /** @type {?} */
        var elBottom = elTop + elHeight;
        return (scrollTop >= elTop && scrollTop <= elBottom);
    };
    /**
     * @param {?} scrollSpyId
     * @param {?} id
     * @return {?}
     */
    ScrollSpyWindowDirective.prototype.updateActiveState = /**
     * @param {?} scrollSpyId
     * @param {?} id
     * @return {?}
     */
    function (scrollSpyId, id) {
        if (this.isElementInViewport()) {
            this.scrollSpyService.updateActiveState(scrollSpyId, id);
        }
        else {
            this.scrollSpyService.removeActiveState(scrollSpyId, id);
        }
    };
    /**
     * @return {?}
     */
    ScrollSpyWindowDirective.prototype.onScroll = /**
     * @return {?}
     */
    function () {
        this.updateActiveState(this.scrollSpyId, this.id);
    };
    /**
     * @return {?}
     */
    ScrollSpyWindowDirective.prototype.listenToScroll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer.listen(window, 'scroll', (/**
         * @return {?}
         */
        function () {
            _this.onScroll();
        }));
    };
    /**
     * @return {?}
     */
    ScrollSpyWindowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.id = this.el.nativeElement.id;
        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));
    };
    /**
     * @return {?}
     */
    ScrollSpyWindowDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.updateActiveState(_this.scrollSpyId, _this.id);
        }), 0);
    };
    /** @nocollapse */
    ScrollSpyWindowDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: ScrollSpyService }
    ]; };
    ScrollSpyWindowDirective.propDecorators = {
        scrollSpyId: [{ type: Input, args: ['mdbScrollSpyWindow',] }],
        offset: [{ type: Input }]
    };
ScrollSpyWindowDirective.ɵfac = function ScrollSpyWindowDirective_Factory(t) { return new (t || ScrollSpyWindowDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollSpyService)); };
ScrollSpyWindowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyWindowDirective, selectors: [["", "mdbScrollSpyWindow", ""]], inputs: { offset: "offset", scrollSpyId: ["mdbScrollSpyWindow", "scrollSpyId"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyWindowDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbScrollSpyWindow]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ScrollSpyService }]; }, { offset: [{
            type: Input
        }], scrollSpyId: [{
            type: Input,
            args: ['mdbScrollSpyWindow']
        }] }); })();
    return ScrollSpyWindowDirective;
}());
export { ScrollSpyWindowDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScrollSpyWindowDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyWindowDirective.prototype._scrollSpyId;
    /** @type {?} */
    ScrollSpyWindowDirective.prototype.offset;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyWindowDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyWindowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyWindowDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyWindowDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyWindowDirective.prototype.scrollSpyService;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,