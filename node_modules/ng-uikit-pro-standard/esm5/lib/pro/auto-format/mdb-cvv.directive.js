/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, HostBinding } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var MdbCvvDirective = /** @class */ (function () {
    function MdbCvvDirective() {
        this.maxLength = '4';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    MdbCvvDirective.prototype.onInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.formatInput(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MdbCvvDirective.prototype.formatInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var input = event.target.value;
        /** @type {?} */
        var newValue = this.getFormattedValue(input);
        event.target.value = newValue;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdbCvvDirective.prototype.getFormattedValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value = this.removeNonDigits(value);
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdbCvvDirective.prototype.removeNonDigits = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.replace(/\D/g, '');
    };
    MdbCvvDirective.propDecorators = {
        maxLength: [{ type: HostBinding, args: ['attr.maxLength',] }],
        onInput: [{ type: HostListener, args: ['input', ['$event'],] }]
    };
MdbCvvDirective.ɵfac = function MdbCvvDirective_Factory(t) { return new (t || MdbCvvDirective)(); };
MdbCvvDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbCvvDirective, selectors: [["", "mdbCvv", ""]], hostVars: 1, hostBindings: function MdbCvvDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbCvvDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("maxLength", ctx.maxLength);
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbCvvDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbCvv]'
            }]
    }], function () { return []; }, { maxLength: [{
            type: HostBinding,
            args: ['attr.maxLength']
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }] }); })();
    return MdbCvvDirective;
}());
export { MdbCvvDirective };
if (false) {
    /** @type {?} */
    MdbCvvDirective.prototype.maxLength;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWN2di5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL2F1dG8tZm9ybWF0L21kYi1jdnYuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRXJFO0FBR1csSUFIWDtBQUNnQixRQUlpQixjQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ2pELElBb0JBLENBQUM7QUFDRDtBQUFRO0FBQXdCO0FBQW1CO0FBQVEsSUFuQnpELGlDQUFPO0FBQU87QUFDQTtBQUdmO0FBQVEsSUFMUCxVQUNRLEtBQVU7QUFDcEIsUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFDSjtBQUFtQjtBQUFRLElBRDdCLHFDQUFXO0FBQU87QUFDSjtBQUFtQjtBQUM5QixJQUZILFVBQVksS0FBVTtBQUN4QjtBQUF5QixZQUFmLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUs7QUFDcEM7QUFBeUIsWUFBZixRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQztBQUNsRCxRQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQXdCO0FBQ2xCO0FBQVEsSUFEcEIsMkNBQWlCO0FBQU87QUFDYjtBQUFtQjtBQUFRLElBRHRDLFVBQWtCLEtBQWE7QUFDakMsUUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxRQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBd0I7QUFDaEI7QUFBUSxJQUR0Qix5Q0FBZTtBQUFPO0FBQ1g7QUFBbUI7QUFDN0IsSUFGRCxVQUFnQixLQUFhO0FBQy9CLFFBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNwQyxJQUFFLENBQUMsQ0F0Qk07QUFBQztZQUhULFNBQVMsU0FBQyxzQkFDVCxRQUFRLEVBQUUsOURBSUssNEJBQWQsV0FBVyxTQUFDLGdCQUFnQjtDQUpULG1CQUNyQixwQkFHcUMsMEJBRW5DLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDL0I7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUFDLElBa0JYLHNCQUFDO0FBQ0EsQ0FEQSxBQTFCRCxJQTBCQztBQUNELFNBeEJhLGVBQWU7QUFFNUI7QUFBYTtBQUFxQixJQUFoQyxvQ0FBK0M7O0FBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFxQkEsQUFBQSxBQWxCQSxBQUFBLEFBREEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF6QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUExQkEsQUEwQkEsQUF2QkEsQUFBQSxBQUVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYkN2dl0nLFxufSlcbmV4cG9ydCBjbGFzcyBNZGJDdnZEaXJlY3RpdmUge1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5tYXhMZW5ndGgnKSBtYXhMZW5ndGggPSAnNCc7XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudCddKVxuICBvbklucHV0KGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLmZvcm1hdElucHV0KGV2ZW50KTtcbiAgfVxuXG4gIGZvcm1hdElucHV0KGV2ZW50OiBhbnkpIHtcbiAgICBjb25zdCBpbnB1dCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuZ2V0Rm9ybWF0dGVkVmFsdWUoaW5wdXQpO1xuICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IG5ld1ZhbHVlO1xuICB9XG5cbiAgZ2V0Rm9ybWF0dGVkVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHZhbHVlID0gdGhpcy5yZW1vdmVOb25EaWdpdHModmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJlbW92ZU5vbkRpZ2l0cyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJyk7XG4gIH1cbn1cbiJdfQ==