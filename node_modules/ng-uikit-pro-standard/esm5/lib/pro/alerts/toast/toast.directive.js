/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Directive, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ToastContainerDirective = /** @class */ (function () {
    function ToastContainerDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ToastContainerDirective.prototype.getContainerElement = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement;
    };
    /** @nocollapse */
    ToastContainerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
ToastContainerDirective.ɵfac = function ToastContainerDirective_Factory(t) { return new (t || ToastContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ToastContainerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ToastContainerDirective, selectors: [["", "mdbToastContainer", ""]], exportAs: ["mdb-toast-container"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToastContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbToastContainer]',
                exportAs: 'mdb-toast-container'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
    return ToastContainerDirective;
}());
export { ToastContainerDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ToastContainerDirective.prototype.el;
}
var ToastContainerModule = /** @class */ (function () {
    function ToastContainerModule() {
    }
    /**
     * @return {?}
     */
    ToastContainerModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ToastContainerModule,
            providers: []
        };
    };
ToastContainerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ToastContainerModule });
ToastContainerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ToastContainerModule_Factory(t) { return new (t || ToastContainerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastContainerModule, { declarations: [ToastContainerDirective], exports: [ToastContainerDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToastContainerModule, [{
        type: NgModule,
        args: [{
                exports: [ToastContainerDirective],
                declarations: [ToastContainerDirective]
            }]
    }], function () { return []; }, null); })();
    return ToastContainerModule;
}());
export { ToastContainerModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9hbGVydHMvdG9hc3QvdG9hc3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUVyRjtBQUVXLElBR1QsaUNBQW9CLEVBQWM7QUFBSSxRQUFsQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsSUFBRSxDQUFDO0FBQ3hDO0FBQVE7QUFBbUI7QUFBUSxJQUFqQyxxREFBbUI7QUFBTztBQUNwQjtBQUFRLElBRGQ7QUFBYyxRQUNaLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDakMsSUFBRSxDQUFDLENBSk07QUFBQztvQ0FKVCxTQUFTLFNBQUMsdERBSXNCO1FBSC9CLFFBQVEsRUFBRSxsQkFLUyxnQkFSOEIsVUFBVTtBQUFHO0FBRy9CLHNCQUMvQixRQUFRLEVBQUUscUJBQXFCLG1CQUNoQzs7Ozs7Ozs7MkVBTHdFO0FBQUMsSUFXMUUsOEJBQUM7QUFFRCxDQUZDLEFBVEQsSUFTQztBQUNELFNBTmEsdUJBQXVCO0FBQ25DO0FBQWE7QUFBUTtBQUFpQjtBQUN6QjtBQUFRLElBRFIscUNBQXNCO0FBQUM7QUFNckM7QUFFTSxJQUZOO0FBQ3NCLElBVXRCLENBQUM7QUFDRDtBQUFRO0FBQW1CO0FBQVEsSUFQMUIsNEJBQU87QUFBTztBQUN2QjtBQUFRLElBRE47QUFBYyxRQUNaLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxvQkFBb0I7QUFDcEMsWUFBTSxTQUFTLEVBQUUsRUFBRTtBQUNuQixTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7d0RBVkYsUUFBUSxTQUFDO1VBQ1IsT0FBTyxFQUFFLENBQUMsdUJBQXVCLENBQUMsc0JBQ2xDLFlBQVksRUFBRSxDQUFDLHVCQUF1QixDQUFDLG1CQUN4Qzs7Ozs7Ozs7Z0RBQ1E7QUFBQyxJQU9WLDJCQUFDO0FBQ0EsQ0FEQSxBQVhELElBV0M7O0FBeEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUxBLEFBQUEsQUFXQSxBQUFBLEFBQUEsQUFUQSxBQVNBLEFBTEEsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQUFBLEFBV0EsQUFBQSxBQU5BLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFWQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVFBLEFBQUEsQUFBQSxBQVhBLEFBV0EsQUFQQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWRiVG9hc3RDb250YWluZXJdJyxcbiAgZXhwb3J0QXM6ICdtZGItdG9hc3QtY29udGFpbmVyJyxcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3RDb250YWluZXJEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuICBnZXRDb250YWluZXJFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHM6IFtUb2FzdENvbnRhaW5lckRpcmVjdGl2ZV0sXG4gIGRlY2xhcmF0aW9uczogW1RvYXN0Q29udGFpbmVyRGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3RDb250YWluZXJNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFRvYXN0Q29udGFpbmVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==