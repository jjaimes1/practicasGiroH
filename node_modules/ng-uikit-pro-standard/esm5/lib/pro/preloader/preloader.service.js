/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { CONTAINER_QUERY, COMPLETE_CLASS_NAME, TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE, EMULATE_ELEMENT_NAME, } from './preloader.constants';
import * as ɵngcc0 from '@angular/core';
var MDBSpinningPreloader = /** @class */ (function () {
    function MDBSpinningPreloader(document) {
        this.document = document;
        this.container = this.document.querySelector(CONTAINER_QUERY);
    }
    /**
     * @return {?}
     */
    MDBSpinningPreloader.errorHandler = /**
     * @return {?}
     */
    function () {
        throw new TypeError(TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE);
    };
    /**
     * @return {?}
     */
    MDBSpinningPreloader.prototype.start = /**
     * @return {?}
     */
    function () {
        this.container.classList.remove(COMPLETE_CLASS_NAME);
    };
    /**
     * @return {?}
     */
    MDBSpinningPreloader.prototype.stop = /**
     * @return {?}
     */
    function () {
        this.container.classList.add(COMPLETE_CLASS_NAME);
    };
    Object.defineProperty(MDBSpinningPreloader.prototype, "container", {
        get: /**
         * @return {?}
         */
        function () {
            return this._container;
        },
        set: /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            this._container = element || this.document.createElement(EMULATE_ELEMENT_NAME);
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    MDBSpinningPreloader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
MDBSpinningPreloader.ɵfac = function MDBSpinningPreloader_Factory(t) { return new (t || MDBSpinningPreloader)(ɵngcc0.ɵɵinject(DOCUMENT)); };
MDBSpinningPreloader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MDBSpinningPreloader, factory: function (t) { return MDBSpinningPreloader.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MDBSpinningPreloader, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
    return MDBSpinningPreloader;
}());
export { MDBSpinningPreloader };
if (false) {
    /** @type {?} */
    MDBSpinningPreloader.prototype._container;
    /** @type {?} */
    MDBSpinningPreloader.prototype.document;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3ByZWxvYWRlci9wcmVsb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFDTCxlQUFlLEVBQ2YsbUJBQW1CLEVBQ25CLDBDQUEwQyxFQUMxQyxvQkFBb0IsR0FDckIsTUFBTSx1QkFBdUIsQ0FBQzs7QUFJL0I7QUFFTSxJQU1KLDhCQUFxQyxRQUFhO0FBQ3BELFFBRHVDLGFBQVEsR0FBUixRQUFRLENBQUs7QUFBQyxRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2xFLElBQUUsQ0FBQztBQUNIO0FBQ087QUFDQTtBQUFRLElBVEMsaUNBQVk7QUFDMUI7QUFBbUI7QUFBUSxJQUQzQjtBQUFjLFFBQ1osTUFBTSxJQUFJLFNBQVMsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQ3BFLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBbUI7QUFBUSxJQUkxQixvQ0FBSztBQUNaO0FBQW1CO0FBQVEsSUFEM0I7QUFBYyxRQUNaLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3pELElBQUUsQ0FBQztBQUVIO0FBQVE7QUFDQztBQUFRLElBRFIsbUNBQUk7QUFDWDtBQUFtQjtBQUFRLElBRDNCO0FBQWMsUUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN0RCxJQUFFLENBQUM7QUFFSCxJQUFFLHNCQUFXLDJDQUFTO0FBQUk7QUFBaUI7QUFDakM7QUFBWSxRQURwQjtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzNCLFFBQUUsQ0FBQztBQUVIO0FBQWlCO0FBQ0o7QUFBdUI7QUFBWSxRQUQ5QyxVQUFxQixPQUFPO0FBQzlCLFlBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNuRixRQUFFLENBQUM7QUFDRjtBQUN3QjtBQUEyQixPQU5qRCxBQXJCRztBQUFDO2lDQUROLFVBQVUsM0NBQ21CO0FBR3RCLGdEQUlPLE1BQU0sU0FBQyxRQUFRO0FBQVE7Ozs7Ozs7O2tDQUFTO0FBQUMsSUFtQmhELDJCQUFDO0FBQ0EsQ0FEQSxBQTNCRCxJQTJCQztBQUNELFNBM0JhLG9CQUFvQjtBQUNoQztBQUFhO0FBQXFCLElBQWpDLDBDQUErQztBQUNqRDtBQUNvQixJQUlOLHdDQUFzQzs7QUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUpBLEFBdEJBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUEzQkEsQUEyQkEsQUExQkEsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHtcbiAgQ09OVEFJTkVSX1FVRVJZLFxuICBDT01QTEVURV9DTEFTU19OQU1FLFxuICBUWVBFX0VSUk9SX0NPTlRBSU5FUl9XQVNfTk9UX0ZPVU5EX01FU1NBR0UsXG4gIEVNVUxBVEVfRUxFTUVOVF9OQU1FLFxufSBmcm9tICcuL3ByZWxvYWRlci5jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBNREJfU1BJTk5JTkdfUFJFTE9BREVSX1RZUEUgfSBmcm9tICcuL3ByZWxvYWRlci50eXBlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNREJTcGlubmluZ1ByZWxvYWRlciB7XG4gIHB1YmxpYyBfY29udGFpbmVyOiBNREJfU1BJTk5JTkdfUFJFTE9BREVSX1RZUEU7XG5cbiAgcHVibGljIHN0YXRpYyBlcnJvckhhbmRsZXIoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihUWVBFX0VSUk9SX0NPTlRBSU5FUl9XQVNfTk9UX0ZPVU5EX01FU1NBR0UpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHVibGljIGRvY3VtZW50OiBhbnkpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihDT05UQUlORVJfUVVFUlkpO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoQ09NUExFVEVfQ0xBU1NfTkFNRSk7XG4gIH1cblxuICBwdWJsaWMgc3RvcCgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKENPTVBMRVRFX0NMQVNTX05BTUUpO1xuICB9XG5cbiAgcHVibGljIGdldCBjb250YWluZXIoKTogTURCX1NQSU5OSU5HX1BSRUxPQURFUl9UWVBFIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICB9XG5cbiAgcHVibGljIHNldCBjb250YWluZXIoZWxlbWVudCkge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGVsZW1lbnQgfHwgdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KEVNVUxBVEVfRUxFTUVOVF9OQU1FKTtcbiAgfVxufVxuIl19