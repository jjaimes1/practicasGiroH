/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core';
import { BACKSPACE, DELETE } from '../../../free/utils/keyboard-navigation';
/** @enum {number} */
import * as ɵngcc0 from '@angular/core';
var KeyCode = {
    backspace: BACKSPACE,
    delete: DELETE,
};
KeyCode[KeyCode.backspace] = 'backspace';
KeyCode[KeyCode.delete] = 'delete';
var InputAutoFillDirective = /** @class */ (function () {
    function InputAutoFillDirective(el, rndr) {
        this.el = el;
        this.rndr = rndr;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    InputAutoFillDirective.prototype.onKeyUp = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        // tslint:disable-next-line: deprecation
        if (!this.opts.enabled || evt.keyCode === KeyCode.backspace || evt.keyCode === KeyCode.delete) {
            return;
        }
        /** @type {?} */
        var val = this.getInputValue();
        /** @type {?} */
        var ews = this.endsWith(val, this.opts.separator);
        /** @type {?} */
        var parts = val.split(this.opts.separator);
        /** @type {?} */
        var idx = parts.length - 1;
        if (val.indexOf(this.opts.separator + this.opts.separator) !== -1 || idx > 2) {
            return;
        }
        if (!ews &&
            (val.length === this.getPartLength(0) ||
                val.length === this.getPartLength(0) + this.getPartLength(1) + this.opts.separator.length)) {
            this.setInputValue(val + this.opts.separator);
        }
        else if (ews &&
            parts[idx - 1].length < this.getPartLength(idx - 1) &&
            this.isNumber(parts[idx - 1]) &&
            (this.isDay(idx - 1) || this.isMonth(idx - 1))) {
            this.setInputValue(this.insertPos(val, val.length - 2, '0'));
        }
        else if (parts[idx].length < this.getPartLength(idx) &&
            this.isNumber(parts[idx]) &&
            ((Number(parts[idx]) > 3 && this.isDay(idx)) || (Number(parts[idx]) > 1 && this.isMonth(idx)))) {
            this.setInputValue(this.insertPos(val, val.length - 1, '0') + (idx < 2 ? this.opts.separator : ''));
        }
    };
    /**
     * @private
     * @param {?} val
     * @param {?} suffix
     * @return {?}
     */
    InputAutoFillDirective.prototype.endsWith = /**
     * @private
     * @param {?} val
     * @param {?} suffix
     * @return {?}
     */
    function (val, suffix) {
        return val.indexOf(suffix, val.length - suffix.length) !== -1;
    };
    /**
     * @private
     * @param {?} str
     * @param {?} idx
     * @param {?} val
     * @return {?}
     */
    InputAutoFillDirective.prototype.insertPos = /**
     * @private
     * @param {?} str
     * @param {?} idx
     * @param {?} val
     * @return {?}
     */
    function (str, idx, val) {
        return str.substr(0, idx) + val + str.substr(idx);
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    InputAutoFillDirective.prototype.getPartLength = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        return this.opts.formatParts[idx].length;
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    InputAutoFillDirective.prototype.isNumber = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return val.match(/[1-9]/) !== null;
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    InputAutoFillDirective.prototype.isDay = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        return this.opts.formatParts[idx].indexOf('d') !== -1;
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    InputAutoFillDirective.prototype.isMonth = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        return (this.opts.formatParts[idx].indexOf('m') !== -1 && this.opts.formatParts[idx].length === 2);
    };
    /**
     * @private
     * @return {?}
     */
    InputAutoFillDirective.prototype.getInputValue = /**
     * @private
     * @return {?}
     */
    function () {
        return this.el.nativeElement.value;
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    InputAutoFillDirective.prototype.setInputValue = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.rndr.setProperty(this.el.nativeElement, 'value', val);
    };
    /** @nocollapse */
    InputAutoFillDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    InputAutoFillDirective.propDecorators = {
        opts: [{ type: Input }],
        onKeyUp: [{ type: HostListener, args: ['keyup', ['$event'],] }]
    };
InputAutoFillDirective.ɵfac = function InputAutoFillDirective_Factory(t) { return new (t || InputAutoFillDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
InputAutoFillDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InputAutoFillDirective, selectors: [["", "mdbInputAutoFill", ""]], hostBindings: function InputAutoFillDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function InputAutoFillDirective_keyup_HostBindingHandler($event) { return ctx.onKeyUp($event); });
    } }, inputs: { opts: "opts" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InputAutoFillDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbInputAutoFill]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { onKeyUp: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], opts: [{
            type: Input
        }] }); })();
    return InputAutoFillDirective;
}());
export { InputAutoFillDirective };
if (false) {
    /** @type {?} */
    InputAutoFillDirective.prototype.opts;
    /**
     * @type {?}
     * @private
     */
    InputAutoFillDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    InputAutoFillDirective.prototype.rndr;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,