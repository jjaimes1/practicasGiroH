/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, Output, EventEmitter, HostListener, ContentChildren, QueryList, ChangeDetectionStrategy, ChangeDetectorRef, } from '@angular/core';
import { state, style, trigger, transition, animate } from '@angular/animations';
import { FixedButtonCaptionDirective } from '../buttons/fixed-caption.directive';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["mdbCollapse", ""];
var _c1 = ["*"];
var CollapseComponent = /** @class */ (function () {
    function CollapseComponent(_cdRef) {
        this._cdRef = _cdRef;
        this.isCollapsed = true;
        this.showBsCollapse = new EventEmitter();
        this.shownBsCollapse = new EventEmitter();
        this.hideBsCollapse = new EventEmitter();
        this.hiddenBsCollapse = new EventEmitter();
        this.collapsed = new EventEmitter();
        this.expanded = new EventEmitter();
        this.overflow = 'hidden';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    CollapseComponent.prototype.onExpandBodyDone = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (event.toState === 'expanded') {
                _this.shownBsCollapse.emit(_this);
                _this.expanded.emit(_this);
                _this.overflow = 'visible';
                _this.showCaptions();
            }
            else {
                _this.hiddenBsCollapse.emit(_this);
                _this.collapsed.emit(_this);
            }
        }), 0);
    };
    /**
     * @return {?}
     */
    CollapseComponent.prototype.showCaptions = /**
     * @return {?}
     */
    function () {
        this.captions.forEach((/**
         * @param {?} caption
         * @return {?}
         */
        function (caption) { return caption.showCaption(); }));
    };
    /**
     * @return {?}
     */
    CollapseComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.isCollapsed ? this.show() : this.hide();
    };
    /**
     * @return {?}
     */
    CollapseComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        this.expandAnimationState = 'expanded';
        this.isCollapsed = false;
        this.showBsCollapse.emit(this);
        this._cdRef.markForCheck();
    };
    /**
     * @return {?}
     */
    CollapseComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.overflow = 'hidden';
        this.expandAnimationState = 'collapsed';
        this.isCollapsed = true;
        this.hideBsCollapse.emit(this);
        this._cdRef.markForCheck();
    };
    /**
     * @return {?}
     */
    CollapseComponent.prototype.initializeCollapseState = /**
     * @return {?}
     */
    function () {
        this.isCollapsed ? this.hide() : this.show();
    };
    /**
     * @return {?}
     */
    CollapseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeCollapseState();
    };
    /** @nocollapse */
    CollapseComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    CollapseComponent.propDecorators = {
        captions: [{ type: ContentChildren, args: [FixedButtonCaptionDirective,] }],
        isCollapsed: [{ type: Input }],
        showBsCollapse: [{ type: Output }],
        shownBsCollapse: [{ type: Output }],
        hideBsCollapse: [{ type: Output }],
        hiddenBsCollapse: [{ type: Output }],
        collapsed: [{ type: Output }],
        expanded: [{ type: Output }],
        expandAnimationState: [{ type: HostBinding, args: ['@expandBody',] }],
        overflow: [{ type: HostBinding, args: ['style.overflow',] }],
        onExpandBodyDone: [{ type: HostListener, args: ['@expandBody.done', ['$event'],] }]
    };
CollapseComponent.ɵfac = function CollapseComponent_Factory(t) { return new (t || CollapseComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
CollapseComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CollapseComponent, selectors: [["", "mdbCollapse", ""]], contentQueries: function CollapseComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, FixedButtonCaptionDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.captions = _t);
    } }, hostVars: 3, hostBindings: function CollapseComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵsyntheticHostListener("@expandBody.done", function CollapseComponent_animation_expandBody_done_HostBindingHandler($event) { return ctx.onExpandBodyDone($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵsyntheticHostProperty("@expandBody", ctx.expandAnimationState);
        ɵngcc0.ɵɵstyleProp("overflow", ctx.overflow);
    } }, inputs: { isCollapsed: "isCollapsed" }, outputs: { showBsCollapse: "showBsCollapse", shownBsCollapse: "shownBsCollapse", hideBsCollapse: "hideBsCollapse", hiddenBsCollapse: "hiddenBsCollapse", collapsed: "collapsed", expanded: "expanded" }, exportAs: ["bs-collapse"], attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 0, template: function CollapseComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, data: { animation: [
            trigger('expandBody', [
                state('collapsed', style({ height: '0px' })),
                state('expanded', style({ height: '*' })),
                transition('expanded <=> collapsed', animate('500ms ease')),
            ]),
        ] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CollapseComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: '[mdbCollapse]',
                exportAs: 'bs-collapse',
                template: '<ng-content></ng-content>',
                animations: [
                    trigger('expandBody', [
                        state('collapsed', style({ height: '0px' })),
                        state('expanded', style({ height: '*' })),
                        transition('expanded <=> collapsed', animate('500ms ease')),
                    ]),
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { isCollapsed: [{
            type: Input
        }], showBsCollapse: [{
            type: Output
        }], shownBsCollapse: [{
            type: Output
        }], hideBsCollapse: [{
            type: Output
        }], hiddenBsCollapse: [{
            type: Output
        }], collapsed: [{
            type: Output
        }], expanded: [{
            type: Output
        }], overflow: [{
            type: HostBinding,
            args: ['style.overflow']
        }], onExpandBodyDone: [{
            type: HostListener,
            args: ['@expandBody.done', ['$event']]
        }], expandAnimationState: [{
            type: HostBinding,
            args: ['@expandBody']
        }], captions: [{
            type: ContentChildren,
            args: [FixedButtonCaptionDirective]
        }] }); })();
    return CollapseComponent;
}());
export { CollapseComponent };
if (false) {
    /** @type {?} */
    CollapseComponent.prototype.captions;
    /** @type {?} */
    CollapseComponent.prototype.isCollapsed;
    /** @type {?} */
    CollapseComponent.prototype.showBsCollapse;
    /** @type {?} */
    CollapseComponent.prototype.shownBsCollapse;
    /** @type {?} */
    CollapseComponent.prototype.hideBsCollapse;
    /** @type {?} */
    CollapseComponent.prototype.hiddenBsCollapse;
    /** @type {?} */
    CollapseComponent.prototype.collapsed;
    /** @type {?} */
    CollapseComponent.prototype.expanded;
    /** @type {?} */
    CollapseComponent.prototype.expandAnimationState;
    /** @type {?} */
    CollapseComponent.prototype.overflow;
    /**
     * @type {?}
     * @private
     */
    CollapseComponent.prototype._cdRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,