/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var CarouselConfig = /** @class */ (function () {
    function CarouselConfig() {
        /**
         * Default interval of auto changing of slides
         */
        this.interval = 5000;
        /**
         * Is loop of auto changing of slides can be paused
         */
        this.noPause = false;
        /**
         * Is slides can wrap from the last to the first slide
         */
        this.noWrap = false;
        this.keyboard = false;
    }
CarouselConfig.ɵfac = function CarouselConfig_Factory(t) { return new (t || CarouselConfig)(); };
CarouselConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CarouselConfig, factory: function (t) { return CarouselConfig.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CarouselConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return CarouselConfig;
}());
export { CarouselConfig };
if (false) {
    /**
     * Default interval of auto changing of slides
     * @type {?}
     */
    CarouselConfig.prototype.interval;
    /**
     * Is loop of auto changing of slides can be paused
     * @type {?}
     */
    CarouselConfig.prototype.noPause;
    /**
     * Is slides can wrap from the last to the first slide
     * @type {?}
     */
    CarouselConfig.prototype.noWrap;
    /** @type {?} */
    CarouselConfig.prototype.keyboard;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29uZmlnLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL2ZyZWUvY2Fyb3VzZWwvY2Fyb3VzZWwuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUzQztBQUVNLElBRk47QUFDYztBQUFZO0FBQ3lCO0FBQ3pDLFFBQUQsYUFBUSxHQUFHLElBQUksQ0FBQztBQUN6QjtBQUNXO0FBQ0U7QUFBWSxRQUFoQixZQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3pCO0FBQ1c7QUFDRTtBQUNiLFFBRFMsV0FBTSxHQUFHLEtBQUssQ0FBQztBQUN4QixRQUNTLGFBQVEsR0FBRyxLQUFLLENBQUM7QUFDMUIsSUFBQSxDQUFDO2tEQVpBLFVBQVU7Ozs7Z0RBQ0w7QUFBQyxJQVdQLHFCQUFDO0FBQ0EsQ0FEQSxBQVpELElBWUM7QUFDRCxTQVphLGNBQWM7QUFDMUI7QUFBYTtBQUFRO0FBQ0Y7QUFFVjtBQUFRLElBRmhCLGtDQUF1QjtBQUN6QjtBQUNPO0FBQ0Y7QUFBaUI7QUFFbkIsSUFGRCxpQ0FBdUI7QUFDekI7QUFDTztBQUNGO0FBQWlCO0FBRWxCLElBRkYsZ0NBQXNCO0FBQ3hCO0FBQ29CLElBQWxCLGtDQUF3Qjs7QUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQVlBLEFBQUEsQUFBQSxBQVpBLEFBWUEsQUFYQSxBQUFBLEFBRUEsQUFBQSxBQUdBLEFBQUEsQUFHQSxBQUFBLEFBRUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhcm91c2VsQ29uZmlnIHtcbiAgLyoqIERlZmF1bHQgaW50ZXJ2YWwgb2YgYXV0byBjaGFuZ2luZyBvZiBzbGlkZXMgKi9cbiAgcHVibGljIGludGVydmFsID0gNTAwMDtcblxuICAvKiogSXMgbG9vcCBvZiBhdXRvIGNoYW5naW5nIG9mIHNsaWRlcyBjYW4gYmUgcGF1c2VkICovXG4gIHB1YmxpYyBub1BhdXNlID0gZmFsc2U7XG5cbiAgLyoqIElzIHNsaWRlcyBjYW4gd3JhcCBmcm9tIHRoZSBsYXN0IHRvIHRoZSBmaXJzdCBzbGlkZSAqL1xuICBwdWJsaWMgbm9XcmFwID0gZmFsc2U7XG5cbiAgcHVibGljIGtleWJvYXJkID0gZmFsc2U7XG59XG4iXX0=