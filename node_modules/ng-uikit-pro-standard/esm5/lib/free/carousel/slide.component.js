/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var SlideComponent = /** @class */ (function () {
    function SlideComponent(el) {
        this.animated = false;
        this.directionNext = false;
        this.directionLeft = false;
        this.directionPrev = false;
        this.directionRight = false;
        /**
         * Wraps element by appropriate CSS classes
         */
        this.el = null;
        this.el = el;
    }
    /** @nocollapse */
    SlideComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SlideComponent.propDecorators = {
        active: [{ type: HostBinding, args: ['class.active',] }, { type: Input }],
        animated: [{ type: HostBinding, args: ['class.animated',] }],
        directionNext: [{ type: HostBinding, args: ['class.carousel-item-next',] }],
        directionLeft: [{ type: HostBinding, args: ['class.carousel-item-left',] }],
        directionPrev: [{ type: HostBinding, args: ['class.carousel-item-prev',] }],
        directionRight: [{ type: HostBinding, args: ['class.carousel-item-right',] }],
        el: [{ type: HostBinding, args: ['class.carousel-item',] }]
    };
SlideComponent.ɵfac = function SlideComponent_Factory(t) { return new (t || SlideComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
SlideComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SlideComponent, selectors: [["mdb-slide"], ["mdb-carousel-item"]], hostVars: 14, hostBindings: function SlideComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("animated", ctx.animated)("carousel-item-next", ctx.directionNext)("carousel-item-left", ctx.directionLeft)("carousel-item-prev", ctx.directionPrev)("carousel-item-right", ctx.directionRight)("carousel-item", ctx.el)("active", ctx.active);
    } }, inputs: { active: "active" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function SlideComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SlideComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-slide, mdb-carousel-item',
                template: "\n    <ng-content></ng-content>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { animated: [{
            type: HostBinding,
            args: ['class.animated']
        }], directionNext: [{
            type: HostBinding,
            args: ['class.carousel-item-next']
        }], directionLeft: [{
            type: HostBinding,
            args: ['class.carousel-item-left']
        }], directionPrev: [{
            type: HostBinding,
            args: ['class.carousel-item-prev']
        }], directionRight: [{
            type: HostBinding,
            args: ['class.carousel-item-right']
        }], el: [{
            type: HostBinding,
            args: ['class.carousel-item']
        }], active: [{
            type: HostBinding,
            args: ['class.active']
        }, {
            type: Input
        }] }); })();
    return SlideComponent;
}());
export { SlideComponent };
if (false) {
    /**
     * Is current slide active
     * @type {?}
     */
    SlideComponent.prototype.active;
    /** @type {?} */
    SlideComponent.prototype.animated;
    /** @type {?} */
    SlideComponent.prototype.directionNext;
    /** @type {?} */
    SlideComponent.prototype.directionLeft;
    /** @type {?} */
    SlideComponent.prototype.directionPrev;
    /** @type {?} */
    SlideComponent.prototype.directionRight;
    /**
     * Wraps element by appropriate CSS classes
     * @type {?}
     */
    SlideComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL2ZyZWUvY2Fyb3VzZWwvc2xpZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBRTFFO0FBQ3FDLElBcUJuQyx3QkFBbUIsRUFBYztBQUNuQyxRQVppQyxhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ2xELFFBQTJDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ2pFLFFBQTJDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ2pFLFFBQTJDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ2pFLFFBQTRDLG1CQUFjLEdBQUcsS0FBSyxDQUFDO0FBQ25FO0FBQVk7QUFDRTtBQUFZLFFBR2pCLE9BQUUsR0FBcUIsSUFBSSxDQUFDO0FBQ3JDLFFBRUksSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDakIsSUFBRSxDQUFDLEFBbEJLO0FBQUM7MkJBTlIsU0FBUyxTQUFDLDdDQU9UO1FBTkEsUUFBUSxFQUFFLGxCQU9nQixnQkFWWSxVQUFVO0FBQUc7U0FHWCxzQkFDeEMsL0JBSjZEO0NBSXJELEVBQUUscUNBRVQsa0JBQ0YsMURBSlcseUJBT1QsV0FBVyxTQUFDLGNBQWMsY0FDMUIsS0FBSztBQUNOLDJCQUNDLFdBQVcsU0FBQyxnQkFBZ0I7QUFBTyxnQ0FDbkMsV0FBVyxTQUFDLDBCQUEwQjtBQUFPLGdDQUM3QyxXQUFXLFNBQUMsMEJBQTBCO0FBQU8sZ0NBQzdDLFdBQVcsU0FBQywwQkFBMEI7QUFBTyxpQ0FDN0MsV0FBVyxTQUFDLDJCQUEyQjtBQUFPLHFCQUU5QyxXQUFXLFNBQUMscUJBQXFCO0FBRWpDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsSUFNVixxQkFBQztBQUNBLENBREEsQUF6QkQsSUF5QkM7QUFDRCxTQXBCYSxjQUFjO0FBQzFCO0FBQWE7QUFBUTtBQUNGO0FBQ2Q7QUFDSCxJQUZELGdDQUV1QjtBQUN6QjtBQUFxQixJQUFuQixrQ0FBZ0Q7QUFDbEQ7QUFBcUIsSUFBbkIsdUNBQStEO0FBQ2pFO0FBQXFCLElBQW5CLHVDQUErRDtBQUNqRTtBQUFxQixJQUFuQix1Q0FBK0Q7QUFDakU7QUFBcUIsSUFBbkIsd0NBQWlFO0FBQ25FO0FBQVE7QUFDRjtBQUFpQjtBQUFRLElBQTdCLDRCQUdtQzs7QUF0QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBc0JBLEFBQUEsQUFBQSxBQVhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXhCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQ0EsQUFQQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBekJBLEFBeUJBLEFBbkJBLEFBQUEsQUFFQSxBQUVBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWRiLXNsaWRlLCBtZGItY2Fyb3VzZWwtaXRlbScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBTbGlkZUNvbXBvbmVudCB7XG4gIC8qKiBJcyBjdXJyZW50IHNsaWRlIGFjdGl2ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBhY3RpdmU6IGJvb2xlYW47XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW5pbWF0ZWQnKSBhbmltYXRlZCA9IGZhbHNlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhcm91c2VsLWl0ZW0tbmV4dCcpIGRpcmVjdGlvbk5leHQgPSBmYWxzZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jYXJvdXNlbC1pdGVtLWxlZnQnKSBkaXJlY3Rpb25MZWZ0ID0gZmFsc2U7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2Fyb3VzZWwtaXRlbS1wcmV2JykgZGlyZWN0aW9uUHJldiA9IGZhbHNlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhcm91c2VsLWl0ZW0tcmlnaHQnKSBkaXJlY3Rpb25SaWdodCA9IGZhbHNlO1xuICAvKiogV3JhcHMgZWxlbWVudCBieSBhcHByb3ByaWF0ZSBDU1MgY2xhc3NlcyAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhcm91c2VsLWl0ZW0nKVxuXG4gIC8qKiBMaW5rIHRvIFBhcmVudChjb250YWluZXItY29sbGVjdGlvbikgY29tcG9uZW50ICovXG4gIHB1YmxpYyBlbDogRWxlbWVudFJlZiB8IGFueSA9IG51bGw7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICB9XG59XG4iXX0=