/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class CarouselConfig {
    constructor() {
        /**
         * Default interval of auto changing of slides
         */
        this.interval = 5000;
        /**
         * Is loop of auto changing of slides can be paused
         */
        this.noPause = false;
        /**
         * Is slides can wrap from the last to the first slide
         */
        this.noWrap = false;
        this.keyboard = false;
    }
}
CarouselConfig.ɵfac = function CarouselConfig_Factory(t) { return new (t || CarouselConfig)(); };
CarouselConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CarouselConfig, factory: CarouselConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CarouselConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * Default interval of auto changing of slides
     * @type {?}
     */
    CarouselConfig.prototype.interval;
    /**
     * Is loop of auto changing of slides can be paused
     * @type {?}
     */
    CarouselConfig.prototype.noPause;
    /**
     * Is slides can wrap from the last to the first slide
     * @type {?}
     */
    CarouselConfig.prototype.noWrap;
    /** @type {?} */
    CarouselConfig.prototype.keyboard;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29uZmlnLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL2ZyZWUvY2Fyb3VzZWwvY2Fyb3VzZWwuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxNQUFNLE9BQU8sY0FBYztBQUMzQixJQUZBO0FBQ0U7QUFBWTtBQUN5QjtBQUFZLFFBQzFDLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFDekI7QUFDVztBQUNFO0FBQVksUUFBaEIsWUFBTyxHQUFHLEtBQUssQ0FBQztBQUN6QjtBQUNXO0FBQ0U7QUFDYixRQURTLFdBQU0sR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFDUyxhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzFCLElBQUEsQ0FBQztBQUNEOzBDQWJDLFVBQVU7Ozs7Z0RBQ1Q7QUFBQztBQUFhO0FBQVE7QUFDcUI7QUFDcEM7QUFBUSxJQUFmLGtDQUF1QjtBQUN6QjtBQUNPO0FBQ0Y7QUFBaUI7QUFFbkIsSUFGRCxpQ0FBdUI7QUFDekI7QUFDTztBQUNGO0FBQWlCO0FBRWxCLElBRkYsZ0NBQXNCO0FBQ3hCO0FBQ29CLElBQWxCLGtDQUF3Qjs7QUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQUdBLEFBQUEsQUFHQSxBQUFBLEFBR0EsQUFBQSxBQUVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYXJvdXNlbENvbmZpZyB7XG4gIC8qKiBEZWZhdWx0IGludGVydmFsIG9mIGF1dG8gY2hhbmdpbmcgb2Ygc2xpZGVzICovXG4gIHB1YmxpYyBpbnRlcnZhbCA9IDUwMDA7XG5cbiAgLyoqIElzIGxvb3Agb2YgYXV0byBjaGFuZ2luZyBvZiBzbGlkZXMgY2FuIGJlIHBhdXNlZCAqL1xuICBwdWJsaWMgbm9QYXVzZSA9IGZhbHNlO1xuXG4gIC8qKiBJcyBzbGlkZXMgY2FuIHdyYXAgZnJvbSB0aGUgbGFzdCB0byB0aGUgZmlyc3Qgc2xpZGUgKi9cbiAgcHVibGljIG5vV3JhcCA9IGZhbHNlO1xuXG4gIHB1YmxpYyBrZXlib2FyZCA9IGZhbHNlO1xufVxuIl19