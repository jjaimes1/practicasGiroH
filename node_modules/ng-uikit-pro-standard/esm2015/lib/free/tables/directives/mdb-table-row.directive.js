/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, EventEmitter, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class MdbTableRowDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.rowCreated = new EventEmitter();
        this.rowRemoved = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.rowCreated.emit({ created: true, el: this.el.nativeElement });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.rowRemoved.emit({ removed: true });
    }
}
MdbTableRowDirective.ɵfac = function MdbTableRowDirective_Factory(t) { return new (t || MdbTableRowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbTableRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbTableRowDirective, selectors: [["", "mdbTableRow", ""]], outputs: { rowCreated: "rowCreated", rowRemoved: "rowRemoved" } });
/** @nocollapse */
MdbTableRowDirective.ctorParameters = () => [
    { type: ElementRef }
];
MdbTableRowDirective.propDecorators = {
    rowCreated: [{ type: Output }],
    rowRemoved: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTableRowDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbTableRow]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { rowCreated: [{
            type: Output
        }], rowRemoved: [{
            type: Output
        }] }); })();
if (false) {
    /** @type {?} */
    MdbTableRowDirective.prototype.rowCreated;
    /** @type {?} */
    MdbTableRowDirective.prototype.rowRemoved;
    /**
     * @type {?}
     * @private
     */
    MdbTableRowDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLXRhYmxlLXJvdy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvZnJlZS90YWJsZXMvZGlyZWN0aXZlcy9tZGItdGFibGUtcm93LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFxQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSy9GLE1BQU0sT0FBTyxvQkFBb0I7QUFBRztBQUFRO0FBQzVDO0FBQ08sSUFHTCxZQUFvQixFQUFjO0FBQ3BDLFFBRHNCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUh6QixlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUNqRCxRQUFZLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ2pELElBRUUsQ0FBQztBQUNIO0FBQ087QUFDSTtBQUFRLElBRGpCLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLElBQUUsQ0FBQztBQUNIO0FBQ087QUFDQztBQUFRLElBRGQsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM1QyxJQUFFLENBQUM7QUFDSDtnREFsQkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxlQUFlLGNBQzFCOzRMQUNJO0FBQUM7QUFBbUI7QUFFcEIsWUFQd0QsVUFBVTtBQUFHO0FBQUc7QUFHdEUseUJBSUosTUFBTTtBQUFLLHlCQUNYLE1BQU07QUFBSTs7Ozs7Ozs7OztvQkFBRTtBQUFDO0FBQWE7QUFDN0IsSUFGRSwwQ0FBK0M7QUFDakQ7QUFBcUIsSUFBbkIsMENBQStDO0FBQ2pEO0FBQ087QUFBaUI7QUFDeEI7QUFFRyxJQUhXLGtDQUFzQjs7QUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBakJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFKQSxBQUFBLEFBT0EsQUFBQSxBQUNBLEFBQUEsQUFEQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWRiVGFibGVSb3ddJ1xufSlcbmV4cG9ydCBjbGFzcyBNZGJUYWJsZVJvd0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBAT3V0cHV0KCkgcm93Q3JlYXRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgcm93UmVtb3ZlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucm93Q3JlYXRlZC5lbWl0KHsgY3JlYXRlZDogdHJ1ZSwgZWw6IHRoaXMuZWwubmF0aXZlRWxlbWVudCB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucm93UmVtb3ZlZC5lbWl0KHsgcmVtb3ZlZDogdHJ1ZSB9KTtcbiAgfVxuXG59XG4iXX0=