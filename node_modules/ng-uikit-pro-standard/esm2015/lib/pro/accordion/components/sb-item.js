/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input, ChangeDetectorRef, } from '@angular/core';
import { SBItemBodyComponent } from './sb-item.body';
import { MdbAccordionService } from '../mdb-accordion.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../mdb-accordion.service';
import * as ɵngcc2 from '@angular/common';

const _c0 = function (a0, a1) { return { "is-collapsed": a0, "active": a1 }; };
const _c1 = ["*"];
export class SBItemComponent {
    /**
     * @param {?} accordionService
     * @param {?} _cdRef
     */
    constructor(accordionService, _cdRef) {
        this.accordionService = accordionService;
        this._cdRef = _cdRef;
        this.collapsed = true;
        this.autoExpand = true;
        this.idModifier = Math.floor(Math.random() * 1000);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.body !== undefined) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.collapsed
                    ? (this.body.expandAnimationState = 'collapsed')
                    : (this.body.expandAnimationState = 'expanded');
            }), 0);
            this.body.toggle(this.collapsed);
            if (this.autoExpand !== false) {
                this.body.openSidenavOnActiveLink();
            }
        }
        if (this.body) {
            this.body.autoExpand = this.autoExpand;
            this.body.collapsed = this.collapsed;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.body && this.body.expandAnimationState === 'expanded') {
                this.collapsed = false;
            }
        }), 40);
        if (this.body) {
            this.body.id = `mdb-accordion-body-${this.idModifier}`;
        }
    }
    /**
     * @param {?} collapsed
     * @return {?}
     */
    toggle(collapsed) {
        this.accordionService.didItemToggled(this);
        this.applyToggle(collapsed);
    }
    /**
     * @param {?} collapsed
     * @return {?}
     */
    applyToggle(collapsed) {
        if (this.body !== undefined) {
            this.collapsed = collapsed;
            this.body.toggle(collapsed);
            this._cdRef.markForCheck();
        }
    }
}
SBItemComponent.ɵfac = function SBItemComponent_Factory(t) { return new (t || SBItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MdbAccordionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
SBItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SBItemComponent, selectors: [["mdb-item"], ["mdb-accordion-item"]], contentQueries: function SBItemComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, SBItemBodyComponent, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.body = _t.first);
    } }, inputs: { collapsed: "collapsed", customClass: "customClass" }, exportAs: ["sbItem"], ngContentSelectors: _c1, decls: 2, vars: 7, consts: [[3, "ngClass"]], template: function SBItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("card ", ctx.customClass, "");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c0, ctx.collapsed, !ctx.collapsed));
    } }, directives: [ɵngcc2.NgClass], encapsulation: 2 });
/** @nocollapse */
SBItemComponent.ctorParameters = () => [
    { type: MdbAccordionService },
    { type: ChangeDetectorRef }
];
SBItemComponent.propDecorators = {
    collapsed: [{ type: Input }],
    customClass: [{ type: Input }],
    body: [{ type: ContentChild, args: [SBItemBodyComponent, { static: false },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SBItemComponent, [{
        type: Component,
        args: [{
                exportAs: 'sbItem',
                selector: 'mdb-item, mdb-accordion-item',
                template: "<div class=\"card {{ customClass }}\" [ngClass]=\"{'is-collapsed': collapsed, 'active': !collapsed}\">\n  <ng-content></ng-content>\n</div>"
            }]
    }], function () { return [{ type: ɵngcc1.MdbAccordionService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { collapsed: [{
            type: Input
        }], customClass: [{
            type: Input
        }], body: [{
            type: ContentChild,
            args: [SBItemBodyComponent, { static: false }]
        }] }); })();
if (false) {
    /** @type {?} */
    SBItemComponent.prototype.collapsed;
    /** @type {?} */
    SBItemComponent.prototype.customClass;
    /** @type {?} */
    SBItemComponent.prototype.autoExpand;
    /** @type {?} */
    SBItemComponent.prototype.idModifier;
    /** @type {?} */
    SBItemComponent.prototype.body;
    /**
     * @type {?}
     * @private
     */
    SBItemComponent.prototype.accordionService;
    /**
     * @type {?}
     * @private
     */
    SBItemComponent.prototype._cdRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,