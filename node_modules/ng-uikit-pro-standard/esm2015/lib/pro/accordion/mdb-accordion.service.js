/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class MdbAccordionService {
    constructor() {
        this._items = [];
        this._multiple = false;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    addItem(item) {
        this._items.push(item);
    }
    /**
     * @param {?} items
     * @return {?}
     */
    updateItemsArray(items) {
        this._items = [...items];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateMultipleState(value) {
        this._multiple = value;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    didItemToggled(item) {
        // on not multiple, it will collpase the rest of items
        if (!this._multiple) {
            this._items.forEach((/**
             * @param {?} el
             * @return {?}
             */
            (el) => {
                if (el !== item) {
                    el.applyToggle(true);
                }
                if (el === item) {
                    /** @type {?} */
                    const collapsed = el.collapsed ? true : false;
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        el.applyToggle(collapsed);
                    }), 0);
                }
            }));
        }
    }
}
MdbAccordionService.ɵfac = function MdbAccordionService_Factory(t) { return new (t || MdbAccordionService)(); };
MdbAccordionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MdbAccordionService, factory: MdbAccordionService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbAccordionService, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    MdbAccordionService.prototype._items;
    /**
     * @type {?}
     * @private
     */
    MdbAccordionService.prototype._multiple;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWFjY29yZGlvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9hY2NvcmRpb24vbWRiLWFjY29yZGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUl6QyxNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLElBRkE7QUFDRSxRQUNRLFdBQU0sR0FBc0IsRUFBRSxDQUFDO0FBQ3pDLFFBQVUsY0FBUyxHQUFHLEtBQUssQ0FBQztBQUM1QixJQThCQSxDQUFDO0FBQ0Q7QUFBUTtBQUF1QjtBQUFtQjtBQUFRLElBOUJ4RCxPQUFPLENBQUMsSUFBcUI7QUFDL0IsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXdCO0FBQzVCO0FBQVEsSUFEVCxnQkFBZ0IsQ0FBQyxLQUF3QjtBQUMzQyxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzdCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBd0I7QUFDckI7QUFBUSxJQURoQixtQkFBbUIsQ0FBQyxLQUFjO0FBQ3BDLFFBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDM0IsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF1QjtBQUN2QjtBQUFRLElBRGIsY0FBYyxDQUFDLElBQXFCO0FBQ3RDLFFBQUksc0RBQXNEO0FBQzFELFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDekIsWUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87QUFBTTtBQUNaO0FBQ0E7QUFDaEIsWUFIdUIsQ0FBQyxFQUFPLEVBQUUsRUFBRTtBQUN0QyxnQkFBUSxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUU7QUFDekIsb0JBQVUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixpQkFBUztBQUNULGdCQUFRLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtBQUN6QjtBQUFxQywwQkFBckIsU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztBQUN2RCxvQkFBVSxVQUFVO0FBQU07QUFDTTtBQUVoQyxvQkFIcUIsR0FBRyxFQUFFO0FBQzFCLHdCQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEMsb0JBQVUsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLGlCQUFTO0FBQ1QsWUFBTSxDQUFDLEVBQUMsQ0FBQztBQUNULFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDsrQ0FqQ0MsVUFBVTs7OztnREFDVDtBQUFDO0FBQWE7QUFBUTtBQUNsQjtBQUFnQjtBQUFRLElBQTVCLHFDQUF1QztBQUN6QztBQUFRO0FBQWlCO0FBRWQ7QUFBUSxJQUZqQix3Q0FBMEI7O0FBTkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQStCQSxBQUFBLEFBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFoQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNCSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zYi1pdGVtJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1kYkFjY29yZGlvblNlcnZpY2Uge1xuICBwcml2YXRlIF9pdGVtczogU0JJdGVtQ29tcG9uZW50W10gPSBbXTtcbiAgcHJpdmF0ZSBfbXVsdGlwbGUgPSBmYWxzZTtcblxuICBhZGRJdGVtKGl0ZW06IFNCSXRlbUNvbXBvbmVudCkge1xuICAgIHRoaXMuX2l0ZW1zLnB1c2goaXRlbSk7XG4gIH1cblxuICB1cGRhdGVJdGVtc0FycmF5KGl0ZW1zOiBTQkl0ZW1Db21wb25lbnRbXSkge1xuICAgIHRoaXMuX2l0ZW1zID0gWy4uLml0ZW1zXTtcbiAgfVxuXG4gIHVwZGF0ZU11bHRpcGxlU3RhdGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9tdWx0aXBsZSA9IHZhbHVlO1xuICB9XG5cbiAgZGlkSXRlbVRvZ2dsZWQoaXRlbTogU0JJdGVtQ29tcG9uZW50KSB7XG4gICAgLy8gb24gbm90IG11bHRpcGxlLCBpdCB3aWxsIGNvbGxwYXNlIHRoZSByZXN0IG9mIGl0ZW1zXG4gICAgaWYgKCF0aGlzLl9tdWx0aXBsZSkge1xuICAgICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoZWw6IGFueSkgPT4ge1xuICAgICAgICBpZiAoZWwgIT09IGl0ZW0pIHtcbiAgICAgICAgICBlbC5hcHBseVRvZ2dsZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWwgPT09IGl0ZW0pIHtcbiAgICAgICAgICBjb25zdCBjb2xsYXBzZWQgPSBlbC5jb2xsYXBzZWQgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBlbC5hcHBseVRvZ2dsZShjb2xsYXBzZWQpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxufVxuIl19