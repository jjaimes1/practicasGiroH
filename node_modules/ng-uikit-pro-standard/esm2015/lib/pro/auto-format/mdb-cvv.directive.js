/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, HostBinding } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class MdbCvvDirective {
    constructor() {
        this.maxLength = '4';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInput(event) {
        this.formatInput(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    formatInput(event) {
        /** @type {?} */
        const input = event.target.value;
        /** @type {?} */
        const newValue = this.getFormattedValue(input);
        event.target.value = newValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getFormattedValue(value) {
        value = this.removeNonDigits(value);
        return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    removeNonDigits(value) {
        return value.replace(/\D/g, '');
    }
}
MdbCvvDirective.ɵfac = function MdbCvvDirective_Factory(t) { return new (t || MdbCvvDirective)(); };
MdbCvvDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbCvvDirective, selectors: [["", "mdbCvv", ""]], hostVars: 1, hostBindings: function MdbCvvDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbCvvDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("maxLength", ctx.maxLength);
    } } });
MdbCvvDirective.propDecorators = {
    maxLength: [{ type: HostBinding, args: ['attr.maxLength',] }],
    onInput: [{ type: HostListener, args: ['input', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbCvvDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbCvv]'
            }]
    }], function () { return []; }, { maxLength: [{
            type: HostBinding,
            args: ['attr.maxLength']
        }], 
    /**
     * @param {?} event
     * @return {?}
     */
    onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }] }); })();
if (false) {
    /** @type {?} */
    MdbCvvDirective.prototype.maxLength;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWN2di5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL2F1dG8tZm9ybWF0L21kYi1jdnYuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBS3JFLE1BQU0sT0FBTyxlQUFlO0FBQzVCLElBSkE7QUFDRyxRQUk4QixjQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ2pELElBb0JBLENBQUM7QUFDRDtBQUFRO0FBQXdCO0FBQW1CO0FBQVEsSUFuQnpELE9BQU8sQ0FBQyxLQUFVO0FBQ3BCLFFBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQ0o7QUFBbUI7QUFBUSxJQUQ1QixXQUFXLENBQUMsS0FBVTtBQUN4QjtBQUF5QixjQUFmLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUs7QUFDcEM7QUFBeUIsY0FBZixRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQztBQUNsRCxRQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXdCO0FBQ2xCO0FBQVEsSUFEbkIsaUJBQWlCLENBQUMsS0FBYTtBQUNqQyxRQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLFFBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUNoQjtBQUFRLElBRHJCLGVBQWUsQ0FBQyxLQUFhO0FBQy9CLFFBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNwQyxJQUFFLENBQUM7QUFDSDsyQ0ExQkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxVQUFVO2FBQ3JCOzs7O1dBQ0k7QUFBQztBQUVHLHdCQUFOLFdBQVcsU0FBQyxnQkFBZ0I7QUFBTyxzQkFFbkMsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUMvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFhO0FBQ0gsSUFKZixvQ0FBK0M7O0FBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFIQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFxQkEsQUFBQSxBQWxCQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBekJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttZGJDdnZdJyxcbn0pXG5leHBvcnQgY2xhc3MgTWRiQ3Z2RGlyZWN0aXZlIHtcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIubWF4TGVuZ3RoJykgbWF4TGVuZ3RoID0gJzQnO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQnXSlcbiAgb25JbnB1dChldmVudDogYW55KSB7XG4gICAgdGhpcy5mb3JtYXRJbnB1dChldmVudCk7XG4gIH1cblxuICBmb3JtYXRJbnB1dChldmVudDogYW55KSB7XG4gICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLmdldEZvcm1hdHRlZFZhbHVlKGlucHV0KTtcbiAgICBldmVudC50YXJnZXQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgfVxuXG4gIGdldEZvcm1hdHRlZFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB2YWx1ZSA9IHRoaXMucmVtb3ZlTm9uRGlnaXRzKHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZW1vdmVOb25EaWdpdHModmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cXEQvZywgJycpO1xuICB9XG59XG4iXX0=