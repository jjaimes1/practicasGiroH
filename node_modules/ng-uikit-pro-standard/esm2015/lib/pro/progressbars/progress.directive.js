/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ProgressDirective {
    constructor() {
        this.addClass = true;
        this.bars = [];
        this._max = 100;
    }
    /**
     * maximum total value of progress element
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set max(v) {
        this._max = v;
        this.bars.forEach((/**
         * @param {?} bar
         * @return {?}
         */
        (bar) => {
            bar.recalculatePercentage();
        }));
    }
    /**
     * @param {?} bar
     * @return {?}
     */
    addBar(bar) {
        if (!this.animate) {
            bar.transition = 'none';
        }
        this.bars.push(bar);
    }
    /**
     * @param {?} bar
     * @return {?}
     */
    removeBar(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    }
}
ProgressDirective.ɵfac = function ProgressDirective_Factory(t) { return new (t || ProgressDirective)(); };
ProgressDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ProgressDirective, selectors: [["mdbProgress"], ["", "mdbProgress", ""]], hostVars: 3, hostBindings: function ProgressDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("max", ctx.max);
        ɵngcc0.ɵɵclassProp("progress", ctx.addClass);
    } }, inputs: { max: "max", animate: "animate" } });
ProgressDirective.propDecorators = {
    animate: [{ type: Input }],
    max: [{ type: HostBinding, args: ['attr.max',] }, { type: Input }],
    addClass: [{ type: HostBinding, args: ['class.progress',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressDirective, [{
        type: Directive,
        args: [{ selector: 'mdbProgress, [mdbProgress]' }]
    }], function () { return []; }, { addClass: [{
            type: HostBinding,
            args: ['class.progress']
        }], max: [{
            type: HostBinding,
            args: ['attr.max']
        }, {
            type: Input
        }], animate: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * if `true` changing value of progress bar will be animated (note: not supported by Bootstrap 4)
     * @type {?}
     */
    ProgressDirective.prototype.animate;
    /** @type {?} */
    ProgressDirective.prototype.addClass;
    /** @type {?} */
    ProgressDirective.prototype.bars;
    /**
     * @type {?}
     * @protected
     */
    ProgressDirective.prototype._max;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9wcm9ncmVzc2JhcnMvcHJvZ3Jlc3MuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlELE1BQU0sT0FBTyxpQkFBaUI7QUFDOUIsSUFGQTtBQUFnQixRQW1Cd0IsYUFBUSxHQUFHLElBQUksQ0FBQztBQUN4RCxRQUNTLFNBQUksR0FBVSxFQUFFLENBQUM7QUFDMUIsUUFDWSxTQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ3ZCLElBV0EsQ0FBQztBQUNEO0FBQVE7QUFBK0M7QUFBbUI7QUFBUSxJQTlCaEYsSUFFVyxHQUFHO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3JCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBb0I7QUFDWDtBQUNYLElBRkgsSUFBVyxHQUFHLENBQUMsQ0FBUztBQUMxQixRQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0FBQU07QUFDckI7QUFBdUI7QUFDdkIsUUFGZ0IsQ0FBQyxHQUFpQixFQUFFLEVBQUU7QUFDNUMsWUFBTSxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUNsQyxRQUFJLENBQUMsRUFBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUFzQjtBQUFtQjtBQUFRLElBTS9DLE1BQU0sQ0FBQyxHQUFpQjtBQUFJLFFBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLFlBQU0sR0FBRyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDOUIsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUFzQjtBQUMzQjtBQUFRLElBREQsU0FBUyxDQUFDLEdBQWlCO0FBQUksUUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBQ0g7NkNBbkNDLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSw0QkFBNEIsRUFBRTs7Ozt1REFDaEQ7QUFBQztBQUNJLHNCQUNQLEtBQUs7QUFBSyxrQkFHVixXQUFXLFNBQUMsVUFBVSxjQUN0QixLQUFLO0FBQ04sdUJBV0MsV0FBVyxTQUFDLGdCQUFnQjtBQUFNOzs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDO0FBQWE7QUFFbEQ7QUFLTTtBQUNSO0FBQVEsSUF4QlAsb0NBQWlDO0FBQ25DO0FBQ29CLElBY2xCLHFDQUFzRDtBQUN4RDtBQUNvQixJQUFsQixpQ0FBd0I7QUFDMUI7QUFDTztBQUNQO0FBQ2lCO0FBQVEsSUFGdkIsaUNBQXFCOztBQTNCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQURBLEFBbUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVlBLEFBQUEsQUE3QkEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBbENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWUEsQUFBQSxBQUFBLEFBQUEsQUFoQkEsQUFBQSxBQWdCQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBCYXJDb21wb25lbnQgfSBmcm9tICcuL2Jhci5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdtZGJQcm9ncmVzcywgW21kYlByb2dyZXNzXScgfSlcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0RpcmVjdGl2ZSB7XG4gIC8qKiBpZiBgdHJ1ZWAgY2hhbmdpbmcgdmFsdWUgb2YgcHJvZ3Jlc3MgYmFyIHdpbGwgYmUgYW5pbWF0ZWQgKG5vdGU6IG5vdCBzdXBwb3J0ZWQgYnkgQm9vdHN0cmFwIDQpICovXG4gIEBJbnB1dCgpIHB1YmxpYyBhbmltYXRlOiBib29sZWFuO1xuXG4gIC8qKiBtYXhpbXVtIHRvdGFsIHZhbHVlIG9mIHByb2dyZXNzIGVsZW1lbnQgKi9cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLm1heCcpXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBnZXQgbWF4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgbWF4KHY6IG51bWJlcikge1xuICAgIHRoaXMuX21heCA9IHY7XG4gICAgdGhpcy5iYXJzLmZvckVhY2goKGJhcjogQmFyQ29tcG9uZW50KSA9PiB7XG4gICAgICBiYXIucmVjYWxjdWxhdGVQZXJjZW50YWdlKCk7XG4gICAgfSk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnByb2dyZXNzJykgcHVibGljIGFkZENsYXNzID0gdHJ1ZTtcblxuICBwdWJsaWMgYmFyczogYW55W10gPSBbXTtcblxuICBwcm90ZWN0ZWQgX21heCA9IDEwMDtcblxuICBwdWJsaWMgYWRkQmFyKGJhcjogQmFyQ29tcG9uZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmFuaW1hdGUpIHtcbiAgICAgIGJhci50cmFuc2l0aW9uID0gJ25vbmUnO1xuICAgIH1cbiAgICB0aGlzLmJhcnMucHVzaChiYXIpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZUJhcihiYXI6IEJhckNvbXBvbmVudCk6IHZvaWQge1xuICAgIHRoaXMuYmFycy5zcGxpY2UodGhpcy5iYXJzLmluZGV4T2YoYmFyKSwgMSk7XG4gIH1cbn1cbiJdfQ==